{
  "status": "finished",
  "code": {
    "server": {
      "fileStructure": {
        "index.js": {
          "code": "const express = require('express');\nconst dotenv = require('dotenv');\nconst helmet = require('helmet');\nconst morgan = require('morgan');\nconst compression = require('compression');\nconst rateLimit = require('express-rate-limit');\nconst corsMiddleware = require('./middlewares/cors');\nconst errorHandler = require('./middlewares/errorHandler');\nconst portfolioRoutes = require('./routes/portfolio.routes');\nconst contactRoutes = require('./routes/contact.routes');\nconst skillsRoutes = require('./routes/skills.routes');\n\ndotenv.config();\n\nconst app = express();\nconst PORT = process.env.PORT || 3001;\n\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000,\n  max: 100,\n  message: 'Too many requests from this IP'\n});\n\napp.use(helmet());\napp.use(compression());\napp.use(morgan('dev'));\napp.use(corsMiddleware);\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\napp.use('/api', limiter);\n\napp.use('/api/portfolio', portfolioRoutes);\napp.use('/api/contact', contactRoutes);\napp.use('/api/skills', skillsRoutes);\n\napp.get('/health', (req, res) => {\n  res.json({ status: 'OK', timestamp: new Date().toISOString() });\n});\n\napp.use(errorHandler);\n\nif (process.env.NODE_ENV !== 'test') {\n  app.listen(PORT, () => {\n    console.log(`Server running on port ${PORT}`);\n  });\n}\n\nmodule.exports = app;"
        },
        "package.json": {
          "code": "{\n  \"name\": \"portfolio-backend\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Portfolio website backend API\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"node index.js\",\n    \"dev\": \"nodemon index.js\",\n    \"test\": \"cross-env NODE_ENV=test jest --coverage --detectOpenHandles\",\n    \"test:watch\": \"cross-env NODE_ENV=test jest --watch\"\n  },\n  \"dependencies\": {\n    \"express\": \"^4.18.2\",\n    \"cors\": \"^2.8.5\",\n    \"dotenv\": \"^16.3.1\",\n    \"helmet\": \"^7.1.0\",\n    \"morgan\": \"^1.10.0\",\n    \"compression\": \"^1.7.4\",\n    \"express-validator\": \"^7.0.1\",\n    \"express-rate-limit\": \"^7.1.5\",\n    \"nodemailer\": \"^6.9.7\"\n  },\n  \"devDependencies\": {\n    \"nodemon\": \"^3.0.2\",\n    \"jest\": \"^29.7.0\",\n    \"supertest\": \"^6.3.3\",\n    \"cross-env\": \"^7.0.3\"\n  },\n  \"jest\": {\n    \"testEnvironment\": \"node\",\n    \"coveragePathIgnorePatterns\": [\"/node_modules/\"],\n    \"testMatch\": [\"**/tests/**/*.test.js\"]\n  }\n}"
        },
        ".env": {
          "code": "PORT=3001\nNODE_ENV=development\nCORS_ORIGIN=http://localhost:3000\nRATE_LIMIT_WINDOW_MS=900000\nRATE_LIMIT_MAX_REQUESTS=100"
        },
        "routes/portfolio.routes.js": {
          "code": "const express = require('express');\nconst router = express.Router();\nconst portfolioController = require('../controllers/portfolio.controller');\nconst { validateProjectId } = require('../middlewares/validation');\n\nrouter.get('/about', portfolioController.getAbout);\nrouter.get('/projects', portfolioController.getProjects);\nrouter.get('/projects/:id', validateProjectId, portfolioController.getProjectById);\nrouter.get('/experience', portfolioController.getExperience);\nrouter.get('/education', portfolioController.getEducation);\nrouter.get('/testimonials', portfolioController.getTestimonials);\n\nmodule.exports = router;"
        },
        "routes/contact.routes.js": {
          "code": "const express = require('express');\nconst router = express.Router();\nconst contactController = require('../controllers/contact.controller');\nconst { validateContactForm } = require('../middlewares/validation');\n\nrouter.post('/', validateContactForm, contactController.submitContact);\nrouter.get('/messages', contactController.getMessages);\n\nmodule.exports = router;"
        },
        "routes/skills.routes.js": {
          "code": "const express = require('express');\nconst router = express.Router();\nconst skillsController = require('../controllers/skills.controller');\n\nrouter.get('/', skillsController.getSkills);\n\nmodule.exports = router;"
        },
        "controllers/portfolio.controller.js": {
          "code": "const mockData = require('../data/mockData');\n\nconst getAbout = (req, res) => {\n  try {\n    res.json(mockData.aboutData);\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to fetch about data' });\n  }\n};\n\nconst getProjects = (req, res) => {\n  try {\n    res.json(mockData.projectsData);\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to fetch projects' });\n  }\n};\n\nconst getProjectById = (req, res) => {\n  try {\n    const projectId = parseInt(req.params.id);\n    const project = mockData.projectsData.find(p => p.id === projectId);\n    \n    if (!project) {\n      return res.status(404).json({ error: 'Project not found' });\n    }\n    \n    const detailedProject = {\n      ...project,\n      details: 'This project involved building a comprehensive solution using modern web technologies. The architecture was designed for scalability and maintainability, with a focus on clean code and best practices.'\n    };\n    \n    res.json(detailedProject);\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to fetch project' });\n  }\n};\n\nconst getExperience = (req, res) => {\n  try {\n    res.json(mockData.experienceData);\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to fetch experience' });\n  }\n};\n\nconst getEducation = (req, res) => {\n  try {\n    res.json(mockData.educationData);\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to fetch education' });\n  }\n};\n\nconst getTestimonials = (req, res) => {\n  try {\n    res.json(mockData.testimonialsData);\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to fetch testimonials' });\n  }\n};\n\nmodule.exports = {\n  getAbout,\n  getProjects,\n  getProjectById,\n  getExperience,\n  getEducation,\n  getTestimonials\n};"
        },
        "controllers/contact.controller.js": {
          "code": "const mockData = require('../data/mockData');\n\nconst submitContact = (req, res) => {\n  try {\n    const { name, email, subject, message } = req.body;\n    \n    const newMessage = {\n      id: `msg_${Date.now()}`,\n      timestamp: new Date().toISOString()\n    };\n    \n    mockData.contactMessages.push({\n      id: mockData.contactMessages.length + 1,\n      name,\n      email,\n      subject,\n      message,\n      timestamp: newMessage.timestamp,\n      read: false\n    });\n    \n    res.status(201).json({\n      success: true,\n      message: 'Message sent successfully',\n      data: newMessage\n    });\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to send message' });\n  }\n};\n\nconst getMessages = (req, res) => {\n  try {\n    res.json(mockData.contactMessages);\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to fetch messages' });\n  }\n};\n\nmodule.exports = {\n  submitContact,\n  getMessages\n};"
        },
        "controllers/skills.controller.js": {
          "code": "const mockData = require('../data/mockData');\n\nconst getSkills = (req, res) => {\n  try {\n    res.json(mockData.skillsData);\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to fetch skills' });\n  }\n};\n\nmodule.exports = {\n  getSkills\n};"
        },
        "data/mockData.js": {
          "code": "const aboutData = {\n  name: 'John Doe',\n  title: 'Full Stack Developer',\n  bio: 'Passionate developer with 5 years of experience building scalable web applications and leading development teams',\n  email: 'john@example.com',\n  location: 'San Francisco, CA',\n  profileImage: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400&h=400&fit=crop'\n};\n\nconst projectsData = [\n  {\n    id: 1,\n    title: 'E-commerce Platform',\n    description: 'Full-stack web application for online shopping with payment integration',\n    technologies: ['React', 'Node.js', 'MongoDB', 'Stripe'],\n    imageUrl: 'https://images.unsplash.com/photo-1556742049-0cfed4f6a45d?w=600&h=400&fit=crop',\n    liveUrl: 'https://project1-demo.com',\n    githubUrl: 'https://github.com/johndoe/ecommerce-platform'\n  },\n  {\n    id: 2,\n    title: 'Task Management System',\n    description: 'Collaborative project management tool with real-time updates',\n    technologies: ['Vue.js', 'Express', 'PostgreSQL', 'Socket.io'],\n    imageUrl: 'https://images.unsplash.com/photo-1611224923853-80b023f02d71?w=600&h=400&fit=crop',\n    liveUrl: 'https://taskmanager-demo.com',\n    githubUrl: 'https://github.com/johndoe/task-manager'\n  },\n  {\n    id: 3,\n    title: 'Weather Dashboard',\n    description: 'Real-time weather monitoring application with forecasting',\n    technologies: ['React', 'TypeScript', 'Weather API', 'Chart.js'],\n    imageUrl: 'https://images.unsplash.com/photo-1504608524841-42fe6f032b4b?w=600&h=400&fit=crop',\n    liveUrl: 'https://weather-app-demo.com',\n    githubUrl: 'https://github.com/johndoe/weather-dashboard'\n  }\n];\n\nconst experienceData = [\n  {\n    id: 1,\n    company: 'Tech Corp',\n    position: 'Senior Developer',\n    startDate: '2020-01',\n    endDate: '2023-12',\n    description: 'Led development of multiple web applications and mentored junior developers',\n    technologies: ['React', 'Node.js', 'AWS', 'Docker']\n  },\n  {\n    id: 2,\n    company: 'StartupXYZ',\n    position: 'Full Stack Developer',\n    startDate: '2018-06',\n    endDate: '2019-12',\n    description: 'Built and maintained core product features for a SaaS platform',\n    technologies: ['Vue.js', 'Python', 'PostgreSQL', 'Redis']\n  },\n  {\n    id: 3,\n    company: 'Digital Agency',\n    position: 'Junior Developer',\n    startDate: '2017-01',\n    endDate: '2018-05',\n    description: 'Developed responsive websites and web applications for clients',\n    technologies: ['HTML', 'CSS', 'JavaScript', 'PHP']\n  }\n];\n\nconst educationData = [\n  {\n    id: 1,\n    institution: 'University of Technology',\n    degree: 'Bachelor of Computer Science',\n    startDate: '2016',\n    endDate: '2020',\n    description: 'Graduated with honors, GPA: 3.8/4.0'\n  },\n  {\n    id: 2,\n    institution: 'Online Academy',\n    degree: 'Full Stack Web Development Certification',\n    startDate: '2019',\n    endDate: '2020',\n    description: 'Completed intensive bootcamp covering modern web technologies'\n  }\n];\n\nconst testimonialsData = [\n  {\n    id: 1,\n    name: 'Sarah Johnson',\n    position: 'CEO at StartupXYZ',\n    text: 'Excellent developer with great attention to detail and strong problem-solving skills',\n    rating: 5,\n    imageUrl: 'https://images.unsplash.com/photo-1494790108377-be9c29b29330?w=200&h=200&fit=crop'\n  },\n  {\n    id: 2,\n    name: 'Michael Chen',\n    position: 'CTO at Tech Corp',\n    text: 'John is a talented developer who consistently delivers high-quality code on time',\n    rating: 5,\n    imageUrl: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=200&h=200&fit=crop'\n  },\n  {\n    id: 3,\n    name: 'Emily Davis',\n    position: 'Product Manager at Digital Agency',\n    text: 'Great communicator and team player who brings innovative solutions to complex problems',\n    rating: 5,\n    imageUrl: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=200&h=200&fit=crop'\n  }\n];\n\nconst skillsData = [\n  {\n    id: 1,\n    category: 'Frontend',\n    skills: [\n      { name: 'React', level: 90 },\n      { name: 'Vue.js', level: 75 },\n      { name: 'TypeScript', level: 85 },\n      { name: 'HTML/CSS', level: 95 },\n      { name: 'Tailwind CSS', level: 80 }\n    ]\n  },\n  {\n    id: 2,\n    category: 'Backend',\n    skills: [\n      { name: 'Node.js', level: 85 },\n      { name: 'Python', level: 70 },\n      { name: 'Express.js', level: 90 },\n      { name: 'PostgreSQL', level: 75 },\n      { name: 'MongoDB', level: 80 }\n    ]\n  },\n  {\n    id: 3,\n    category: 'DevOps',\n    skills: [\n      { name: 'Docker', level: 70 },\n      { name: 'AWS', level: 65 },\n      { name: 'CI/CD', level: 75 },\n      { name: 'Git', level: 90 },\n      { name: 'Linux', level: 70 }\n    ]\n  }\n];\n\nconst contactMessages = [\n  {\n    id: 1,\n    name: 'Jane Smith',\n    email: 'jane@example.com',\n    subject: 'Project Inquiry',\n    message: 'I would like to discuss a potential web development project for my company',\n    timestamp: '2024-01-15T10:30:00Z',\n    read: false\n  }\n];\n\nmodule.exports = {\n  aboutData,\n  projectsData,\n  experienceData,\n  educationData,\n  testimonialsData,\n  skillsData,\n  contactMessages\n};"
        },
        "middlewares/cors.js": {
          "code": "const cors = require('cors');\n\nconst corsOptions = {\n  origin: function (origin, callback) {\n    const allowedOrigins = [\n      'http://localhost:3000',\n      'http://localhost:3001',\n      'https://yourdomain.com'\n    ];\n    \n    if (!origin || allowedOrigins.indexOf(origin) !== -1) {\n      callback(null, true);\n    } else {\n      callback(new Error('Not allowed by CORS'));\n    }\n  },\n  credentials: true,\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n  allowedHeaders: ['Content-Type', 'Authorization'],\n  exposedHeaders: ['X-Total-Count'],\n  maxAge: 86400\n};\n\nmodule.exports = cors(corsOptions);"
        },
        "middlewares/errorHandler.js": {
          "code": "const errorHandler = (err, req, res, next) => {\n  const status = err.status || 500;\n  const message = err.message || 'Internal Server Error';\n  \n  if (process.env.NODE_ENV === 'development') {\n    console.error('Error:', err);\n  }\n  \n  res.status(status).json({\n    success: false,\n    error: {\n      message,\n      status,\n      ...(process.env.NODE_ENV === 'development' && { stack: err.stack })\n    }\n  });\n};\n\nmodule.exports = errorHandler;"
        },
        "middlewares/validation.js": {
          "code": "const { body, param, validationResult } = require('express-validator');\n\nconst handleValidationErrors = (req, res, next) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      success: false,\n      errors: errors.array()\n    });\n  }\n  next();\n};\n\nconst validateContactForm = [\n  body('name')\n    .trim()\n    .notEmpty().withMessage('Name is required')\n    .isLength({ min: 2, max: 100 }).withMessage('Name must be between 2 and 100 characters'),\n  body('email')\n    .trim()\n    .notEmpty().withMessage('Email is required')\n    .isEmail().withMessage('Invalid email format'),\n  body('subject')\n    .trim()\n    .notEmpty().withMessage('Subject is required')\n    .isLength({ min: 2, max: 200 }).withMessage('Subject must be between 2 and 200 characters'),\n  body('message')\n    .trim()\n    .notEmpty().withMessage('Message is required')\n    .isLength({ min: 10, max: 1000 }).withMessage('Message must be between 10 and 1000 characters'),\n  handleValidationErrors\n];\n\nconst validateProjectId = [\n  param('id')\n    .isInt({ min: 1 }).withMessage('Invalid project ID'),\n  handleValidationErrors\n];\n\nmodule.exports = {\n  validateContactForm,\n  validateProjectId\n};"
        },
        "types/index.js": {
          "code": "const ProjectType = {\n  id: 'number',\n  title: 'string',\n  description: 'string',\n  technologies: 'array',\n  imageUrl: 'string',\n  liveUrl: 'string',\n  githubUrl: 'string',\n  details: 'string'\n};\n\nconst ExperienceType = {\n  id: 'number',\n  company: 'string',\n  position: 'string',\n  startDate: 'string',\n  endDate: 'string',\n  description: 'string',\n  technologies: 'array'\n};\n\nconst EducationType = {\n  id: 'number',\n  institution: 'string',\n  degree: 'string',\n  startDate: 'string',\n  endDate: 'string',\n  description: 'string'\n};\n\nconst TestimonialType = {\n  id: 'number',\n  name: 'string',\n  position: 'string',\n  text: 'string',\n  rating: 'number',\n  imageUrl: 'string'\n};\n\nconst SkillCategoryType = {\n  id: 'number',\n  category: 'string',\n  skills: 'array'\n};\n\nconst ContactMessageType = {\n  id: 'number',\n  name: 'string',\n  email: 'string',\n  subject: 'string',\n  message: 'string',\n  timestamp: 'string',\n  read: 'boolean'\n};\n\nconst AboutType = {\n  name: 'string',\n  title: 'string',\n  bio: 'string',\n  email: 'string',\n  location: 'string',\n  profileImage: 'string'\n};\n\nmodule.exports = {\n  ProjectType,\n  ExperienceType,\n  EducationType,\n  TestimonialType,\n  SkillCategoryType,\n  ContactMessageType,\n  AboutType\n};"
        },
        "tests/portfolio.controller.test.js": {
          "code": "const request = require('supertest');\nconst app = require('../index');\n\ndescribe('Portfolio Controller Tests', () => {\n  describe('GET /api/portfolio/about', () => {\n    it('should return about information', async () => {\n      const response = await request(app)\n        .get('/api/portfolio/about')\n        .expect(200);\n      \n      expect(response.body).toHaveProperty('name');\n      expect(response.body).toHaveProperty('title');\n      expect(response.body).toHaveProperty('bio');\n      expect(response.body).toHaveProperty('email');\n    });\n  });\n  \n  describe('GET /api/portfolio/projects', () => {\n    it('should return all projects', async () => {\n      const response = await request(app)\n        .get('/api/portfolio/projects')\n        .expect(200);\n      \n      expect(Array.isArray(response.body)).toBe(true);\n      expect(response.body.length).toBeGreaterThan(0);\n      expect(response.body[0]).toHaveProperty('id');\n      expect(response.body[0]).toHaveProperty('title');\n    });\n  });\n  \n  describe('GET /api/portfolio/projects/:id', () => {\n    it('should return a specific project', async () => {\n      const response = await request(app)\n        .get('/api/portfolio/projects/1')\n        .expect(200);\n      \n      expect(response.body).toHaveProperty('id', 1);\n      expect(response.body).toHaveProperty('details');\n    });\n    \n    it('should return 404 for non-existent project', async () => {\n      await request(app)\n        .get('/api/portfolio/projects/999')\n        .expect(404);\n    });\n  });\n  \n  describe('GET /api/portfolio/experience', () => {\n    it('should return work experience', async () => {\n      const response = await request(app)\n        .get('/api/portfolio/experience')\n        .expect(200);\n      \n      expect(Array.isArray(response.body)).toBe(true);\n      expect(response.body[0]).toHaveProperty('company');\n      expect(response.body[0]).toHaveProperty('position');\n    });\n  });\n});"
        },
        "tests/contact.controller.test.js": {
          "code": "const request = require('supertest');\nconst app = require('../index');\n\ndescribe('Contact Controller Tests', () => {\n  describe('POST /api/contact', () => {\n    it('should submit contact form successfully', async () => {\n      const contactData = {\n        name: 'Test User',\n        email: 'test@example.com',\n        subject: 'Test Subject',\n        message: 'This is a test message for the contact form'\n      };\n      \n      const response = await request(app)\n        .post('/api/contact')\n        .send(contactData)\n        .expect(201);\n      \n      expect(response.body).toHaveProperty('success', true);\n      expect(response.body).toHaveProperty('message', 'Message sent successfully');\n      expect(response.body.data).toHaveProperty('id');\n      expect(response.body.data).toHaveProperty('timestamp');\n    });\n    \n    it('should fail with invalid email', async () => {\n      const contactData = {\n        name: 'Test User',\n        email: 'invalid-email',\n        subject: 'Test Subject',\n        message: 'This is a test message'\n      };\n      \n      const response = await request(app)\n        .post('/api/contact')\n        .send(contactData)\n        .expect(400);\n      \n      expect(response.body).toHaveProperty('success', false);\n      expect(response.body).toHaveProperty('errors');\n    });\n    \n    it('should fail with missing fields', async () => {\n      const contactData = {\n        name: 'Test User'\n      };\n      \n      await request(app)\n        .post('/api/contact')\n        .send(contactData)\n        .expect(400);\n    });\n  });\n  \n  describe('GET /api/contact/messages', () => {\n    it('should return all contact messages', async () => {\n      const response = await request(app)\n        .get('/api/contact/messages')\n        .expect(200);\n      \n      expect(Array.isArray(response.body)).toBe(true);\n      if (response.body.length > 0) {\n        expect(response.body[0]).toHaveProperty('name');\n        expect(response.body[0]).toHaveProperty('email');\n        expect(response.body[0]).toHaveProperty('message');\n      }\n    });\n  });\n});"
        },
        "tests/skills.controller.test.js": {
          "code": "const request = require('supertest');\nconst app = require('../index');\n\ndescribe('Skills Controller Tests', () => {\n  describe('GET /api/skills', () => {\n    it('should return all skills grouped by category', async () => {\n      const response = await request(app)\n        .get('/api/skills')\n        .expect(200);\n      \n      expect(Array.isArray(response.body)).toBe(true);\n      expect(response.body.length).toBeGreaterThan(0);\n      expect(response.body[0]).toHaveProperty('id');\n      expect(response.body[0]).toHaveProperty('category');\n      expect(response.body[0]).toHaveProperty('skills');\n      expect(Array.isArray(response.body[0].skills)).toBe(true);\n    });\n    \n    it('should have valid skill structure', async () => {\n      const response = await request(app)\n        .get('/api/skills')\n        .expect(200);\n      \n      const firstCategory = response.body[0];\n      expect(firstCategory.skills[0]).toHaveProperty('name');\n      expect(firstCategory.skills[0]).toHaveProperty('level');\n      expect(typeof firstCategory.skills[0].level).toBe('number');\n    });\n  });\n});"
        },
        "tests/routes.test.js": {
          "code": "const request = require('supertest');\nconst app = require('../index');\n\ndescribe('Routes Integration Tests', () => {\n  describe('Health Check', () => {\n    it('should return health status', async () => {\n      const response = await request(app)\n        .get('/health')\n        .expect(200);\n      \n      expect(response.body).toHaveProperty('status', 'OK');\n      expect(response.body).toHaveProperty('timestamp');\n    });\n  });\n  \n  describe('Portfolio Routes', () => {\n    it('should have all portfolio endpoints accessible', async () => {\n      await request(app).get('/api/portfolio/about').expect(200);\n      await request(app).get('/api/portfolio/projects').expect(200);\n      await request(app).get('/api/portfolio/experience').expect(200);\n      await request(app).get('/api/portfolio/education').expect(200);\n      await request(app).get('/api/portfolio/testimonials').expect(200);\n    });\n  });\n  \n  describe('Skills Routes', () => {\n    it('should have skills endpoint accessible', async () => {\n      await request(app).get('/api/skills').expect(200);\n    });\n  });\n  \n  describe('Contact Routes', () => {\n    it('should have contact endpoints accessible', async () => {\n      await request(app).get('/api/contact/messages').expect(200);\n    });\n  });\n  \n  describe('Error Handling', () => {\n    it('should return 404 for non-existent routes', async () => {\n      const response = await request(app)\n        .get('/api/non-existent-route')\n        .expect(404);\n    });\n  });\n  \n  describe('CORS Headers', () => {\n    it('should include CORS headers', async () => {\n      const response = await request(app)\n        .get('/api/portfolio/about')\n        .set('Origin', 'http://localhost:3000');\n      \n      expect(response.headers).toHaveProperty('access-control-allow-origin');\n    });\n  });\n});"
        }
      },
      "libraries": [
        "express",
        "cors",
        "dotenv",
        "helmet",
        "morgan",
        "compression",
        "express-validator",
        "express-rate-limit",
        "nodemailer",
        "nodemon",
        "jest",
        "supertest",
        "cross-env"
      ]
    }
  }
}