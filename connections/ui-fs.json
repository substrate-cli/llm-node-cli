{
  "status": "finished",
  "code": {
    "app": {
      "fileStructure": {
        "src/app/page.tsx": {
          "code": "import HeroSection from './components/HeroSection';\nimport AboutSection from './components/AboutSection';\nimport SkillsSection from './components/SkillsSection';\nimport ProjectsSection from './components/ProjectsSection';\nimport ExperienceSection from './components/ExperienceSection';\nimport TestimonialsSection from './components/TestimonialsSection';\nimport ContactSection from './components/ContactSection';\n\nexport default function HomePage() {\n  return (\n    <main className=\"min-h-screen bg-background\">\n      <HeroSection />\n      <AboutSection />\n      <SkillsSection />\n      <ProjectsSection />\n      <ExperienceSection />\n      <TestimonialsSection />\n      <ContactSection />\n    </main>\n  );\n}"
        },
        "src/app/layout.tsx": {
          "code": "import type { Metadata } from 'next';\nimport { Inter } from 'next/font/google';\nimport './globals.css';\nimport Navigation from './components/Navigation';\nimport Footer from './components/Footer';\n\nconst inter = Inter({ subsets: ['latin'] });\n\nexport const metadata: Metadata = {\n  title: 'Portfolio - Full Stack Developer',\n  description: 'Professional portfolio showcasing projects and skills',\n};\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\" className=\"scroll-smooth\">\n      <body className={inter.className}>\n        <Navigation />\n        {children}\n        <Footer />\n      </body>\n    </html>\n  );\n}"
        },
        "src/app/projects/[id]/page.tsx": {
          "code": "import { getProject, getProjects } from '@/app/utils/data';\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport { ArrowLeft, ExternalLink, Github } from 'lucide-react';\n\nexport async function generateStaticParams() {\n  try {\n    const projects = await getProjects();\n    return projects.map((project) => ({\n      id: project.id.toString(),\n    }));\n  } catch {\n    return [];\n  }\n}\n\nexport default async function ProjectDetailPage({ params }: { params: { id: string } }) {\n  try {\n    const project = await getProject(parseInt(params.id));\n    \n    return (\n      <main className=\"min-h-screen bg-background pt-20\">\n        <div className=\"container mx-auto px-4 py-12\">\n          <Link href=\"/#projects\" className=\"inline-flex items-center gap-2 text-primary hover:text-primary-dark mb-8\">\n            <ArrowLeft className=\"w-4 h-4\" />\n            Back to Projects\n          </Link>\n          \n          <div className=\"grid lg:grid-cols-2 gap-12\">\n            <div className=\"relative aspect-video rounded-2xl overflow-hidden bg-surface\">\n              {project.imageUrl && (\n                <Image\n                  src={project.imageUrl}\n                  alt={project.title}\n                  fill\n                  className=\"object-cover\"\n                />\n              )}\n            </div>\n            \n            <div>\n              <h1 className=\"text-4xl font-bold text-foreground mb-4\">{project.title}</h1>\n              <p className=\"text-muted text-lg mb-6\">{project.description}</p>\n              \n              {project.details && (\n                <div className=\"mb-8\">\n                  <h2 className=\"text-2xl font-semibold text-foreground mb-3\">Project Details</h2>\n                  <p className=\"text-muted-foreground\">{project.details}</p>\n                </div>\n              )}\n              \n              <div className=\"mb-8\">\n                <h3 className=\"text-xl font-semibold text-foreground mb-3\">Technologies Used</h3>\n                <div className=\"flex flex-wrap gap-2\">\n                  {project.technologies.map((tech, index) => (\n                    <span key={index} className=\"px-3 py-1 bg-primary/10 text-primary rounded-full text-sm\">\n                      {tech}\n                    </span>\n                  ))}\n                </div>\n              </div>\n              \n              <div className=\"flex gap-4\">\n                {project.liveUrl && (\n                  <a\n                    href={project.liveUrl}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"inline-flex items-center gap-2 px-6 py-3 bg-primary text-white rounded-lg hover:bg-primary-dark transition-colors\"\n                  >\n                    <ExternalLink className=\"w-4 h-4\" />\n                    View Live\n                  </a>\n                )}\n                {project.githubUrl && (\n                  <a\n                    href={project.githubUrl}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"inline-flex items-center gap-2 px-6 py-3 border border-border text-foreground rounded-lg hover:bg-surface transition-colors\"\n                  >\n                    <Github className=\"w-4 h-4\" />\n                    View Code\n                  </a>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n    );\n  } catch (error) {\n    return (\n      <main className=\"min-h-screen bg-background pt-20\">\n        <div className=\"container mx-auto px-4 py-12 text-center\">\n          <h1 className=\"text-2xl font-bold text-foreground mb-4\">Project Not Found</h1>\n          <p className=\"text-muted mb-8\">The project you're looking for doesn't exist.</p>\n          <Link href=\"/#projects\" className=\"text-primary hover:text-primary-dark\">\n            Back to Projects\n          </Link>\n        </div>\n      </main>\n    );\n  }\n}"
        },
        "src/app/components/Navigation.tsx": {
          "code": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport Link from 'next/link';\nimport { Menu, X } from 'lucide-react';\n\nexport default function Navigation() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [scrolled, setScrolled] = useState(false);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setScrolled(window.scrollY > 20);\n    };\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  const navLinks = [\n    { href: '#about', label: 'About' },\n    { href: '#skills', label: 'Skills' },\n    { href: '#projects', label: 'Projects' },\n    { href: '#experience', label: 'Experience' },\n    { href: '#testimonials', label: 'Testimonials' },\n    { href: '#contact', label: 'Contact' },\n  ];\n\n  return (\n    <nav className={`fixed top-0 w-full z-50 transition-all ${scrolled ? 'bg-background/95 backdrop-blur-md shadow-lg' : 'bg-transparent'}`}>\n      <div className=\"container mx-auto px-4\">\n        <div className=\"flex items-center justify-between h-16\">\n          <Link href=\"/\" className=\"text-2xl font-bold text-primary\">\n            Portfolio\n          </Link>\n\n          <div className=\"hidden md:flex items-center space-x-8\">\n            {navLinks.map((link) => (\n              <Link\n                key={link.href}\n                href={link.href}\n                className=\"text-foreground hover:text-primary transition-colors\"\n              >\n                {link.label}\n              </Link>\n            ))}\n          </div>\n\n          <button\n            onClick={() => setIsOpen(!isOpen)}\n            className=\"md:hidden text-foreground\"\n          >\n            {isOpen ? <X className=\"w-6 h-6\" /> : <Menu className=\"w-6 h-6\" />}\n          </button>\n        </div>\n\n        {isOpen && (\n          <div className=\"md:hidden bg-background border-t border-border\">\n            <div className=\"px-2 pt-2 pb-3 space-y-1\">\n              {navLinks.map((link) => (\n                <Link\n                  key={link.href}\n                  href={link.href}\n                  onClick={() => setIsOpen(false)}\n                  className=\"block px-3 py-2 text-foreground hover:text-primary transition-colors\"\n                >\n                  {link.label}\n                </Link>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </nav>\n  );\n}"
        },
        "src/app/components/HeroSection.tsx": {
          "code": "import { getAbout } from '../utils/data';\nimport Image from 'next/image';\nimport { MapPin, Mail, ArrowDown } from 'lucide-react';\n\nexport default async function HeroSection() {\n  try {\n    const profile = await getAbout();\n    \n    return (\n      <section className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-background via-surface to-background\">\n        <div className=\"container mx-auto px-4 py-20\">\n          <div className=\"text-center\">\n            {profile.profileImage && (\n              <div className=\"relative w-32 h-32 mx-auto mb-8\">\n                <Image\n                  src={profile.profileImage}\n                  alt={profile.name}\n                  fill\n                  className=\"rounded-full object-cover border-4 border-primary\"\n                />\n              </div>\n            )}\n            \n            <h1 className=\"text-5xl md:text-7xl font-bold text-foreground mb-4\">\n              {profile.name}\n            </h1>\n            \n            <h2 className=\"text-2xl md:text-3xl text-primary mb-6\">\n              {profile.title}\n            </h2>\n            \n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto mb-8\">\n              {profile.bio}\n            </p>\n            \n            <div className=\"flex flex-wrap items-center justify-center gap-6 mb-12\">\n              {profile.location && (\n                <div className=\"flex items-center gap-2 text-muted\">\n                  <MapPin className=\"w-4 h-4\" />\n                  <span>{profile.location}</span>\n                </div>\n              )}\n              {profile.email && (\n                <div className=\"flex items-center gap-2 text-muted\">\n                  <Mail className=\"w-4 h-4\" />\n                  <span>{profile.email}</span>\n                </div>\n              )}\n            </div>\n            \n            <a\n              href=\"#about\"\n              className=\"inline-flex items-center gap-2 px-8 py-4 bg-primary text-white rounded-full hover:bg-primary-dark transition-colors\"\n            >\n              Learn More\n              <ArrowDown className=\"w-4 h-4 animate-bounce\" />\n            </a>\n          </div>\n        </div>\n      </section>\n    );\n  } catch (error) {\n    return (\n      <section className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-background via-surface to-background\">\n        <div className=\"text-center\">\n          <h1 className=\"text-5xl font-bold text-foreground mb-4\">Welcome</h1>\n          <p className=\"text-muted\">Loading profile information...</p>\n        </div>\n      </section>\n    );\n  }\n}"
        },
        "src/app/components/AboutSection.tsx": {
          "code": "import { getAbout, getEducation } from '../utils/data';\nimport { GraduationCap, Calendar } from 'lucide-react';\n\nexport default async function AboutSection() {\n  try {\n    const [profile, education] = await Promise.all([getAbout(), getEducation()]);\n    \n    return (\n      <section id=\"about\" className=\"py-20 bg-surface\">\n        <div className=\"container mx-auto px-4\">\n          <h2 className=\"text-4xl font-bold text-center text-foreground mb-12\">About Me</h2>\n          \n          <div className=\"grid md:grid-cols-2 gap-12\">\n            <div>\n              <h3 className=\"text-2xl font-semibold text-foreground mb-4\">Who I Am</h3>\n              <p className=\"text-muted-foreground mb-6\">{profile.bio}</p>\n              <p className=\"text-muted-foreground\">\n                I'm passionate about creating innovative solutions and continuously learning new technologies.\n                My goal is to build applications that make a real difference in people's lives.\n              </p>\n            </div>\n            \n            <div>\n              <h3 className=\"text-2xl font-semibold text-foreground mb-4\">Education</h3>\n              <div className=\"space-y-4\">\n                {education.map((edu) => (\n                  <div key={edu.id} className=\"bg-background rounded-lg p-4\">\n                    <div className=\"flex items-start gap-3\">\n                      <GraduationCap className=\"w-5 h-5 text-primary mt-1\" />\n                      <div className=\"flex-1\">\n                        <h4 className=\"font-semibold text-foreground\">{edu.degree}</h4>\n                        <p className=\"text-primary\">{edu.institution}</p>\n                        <div className=\"flex items-center gap-2 text-sm text-muted mt-1\">\n                          <Calendar className=\"w-3 h-3\" />\n                          <span>{edu.startDate} - {edu.endDate}</span>\n                        </div>\n                        {edu.description && (\n                          <p className=\"text-muted-foreground text-sm mt-2\">{edu.description}</p>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    );\n  } catch (error) {\n    return (\n      <section id=\"about\" className=\"py-20 bg-surface\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h2 className=\"text-4xl font-bold text-foreground mb-4\">About Me</h2>\n          <p className=\"text-muted\">Unable to load information at this time.</p>\n        </div>\n      </section>\n    );\n  }\n}"
        },
        "src/app/components/SkillsSection.tsx": {
          "code": "import { getSkills } from '../utils/data';\n\nexport default async function SkillsSection() {\n  try {\n    const skillCategories = await getSkills();\n    \n    return (\n      <section id=\"skills\" className=\"py-20 bg-background\">\n        <div className=\"container mx-auto px-4\">\n          <h2 className=\"text-4xl font-bold text-center text-foreground mb-12\">Skills & Expertise</h2>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {skillCategories.map((category) => (\n              <div key={category.id} className=\"bg-surface rounded-xl p-6\">\n                <h3 className=\"text-xl font-semibold text-foreground mb-4\">{category.category}</h3>\n                <div className=\"space-y-3\">\n                  {category.skills.map((skill, index) => (\n                    <div key={index}>\n                      <div className=\"flex justify-between mb-1\">\n                        <span className=\"text-muted-foreground\">{skill.name}</span>\n                        <span className=\"text-primary font-medium\">{skill.level}%</span>\n                      </div>\n                      <div className=\"w-full bg-background rounded-full h-2\">\n                        <div\n                          className=\"bg-gradient-to-r from-primary to-primary-dark h-2 rounded-full transition-all duration-500\"\n                          style={{ width: `${skill.level}%` }}\n                        />\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  } catch (error) {\n    return (\n      <section id=\"skills\" className=\"py-20 bg-background\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h2 className=\"text-4xl font-bold text-foreground mb-4\">Skills & Expertise</h2>\n          <p className=\"text-muted\">Unable to load skills at this time.</p>\n        </div>\n      </section>\n    );\n  }\n}"
        },
        "src/app/components/ProjectsSection.tsx": {
          "code": "import { getProjects } from '../utils/data';\nimport ProjectCard from './ProjectCard';\n\nexport default async function ProjectsSection() {\n  try {\n    const projects = await getProjects();\n    \n    return (\n      <section id=\"projects\" className=\"py-20 bg-surface\">\n        <div className=\"container mx-auto px-4\">\n          <h2 className=\"text-4xl font-bold text-center text-foreground mb-12\">Featured Projects</h2>\n          \n          {projects.length > 0 ? (\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n              {projects.map((project) => (\n                <ProjectCard key={project.id} project={project} />\n              ))}\n            </div>\n          ) : (\n            <p className=\"text-center text-muted\">No projects available at the moment.</p>\n          )}\n        </div>\n      </section>\n    );\n  } catch (error) {\n    return (\n      <section id=\"projects\" className=\"py-20 bg-surface\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h2 className=\"text-4xl font-bold text-foreground mb-4\">Featured Projects</h2>\n          <p className=\"text-muted\">Unable to load projects at this time.</p>\n        </div>\n      </section>\n    );\n  }\n}"
        },
        "src/app/components/ProjectCard.tsx": {
          "code": "import Image from 'next/image';\nimport Link from 'next/link';\nimport { ExternalLink, Github, ArrowRight } from 'lucide-react';\nimport { Project } from '../utils/data';\n\ninterface ProjectCardProps {\n  project: Project;\n}\n\nexport default function ProjectCard({ project }: ProjectCardProps) {\n  return (\n    <div className=\"bg-background rounded-xl overflow-hidden shadow-lg hover:shadow-xl transition-shadow\">\n      <div className=\"relative h-48 bg-surface\">\n        {project.imageUrl && (\n          <Image\n            src={project.imageUrl}\n            alt={project.title}\n            fill\n            className=\"object-cover\"\n          />\n        )}\n      </div>\n      \n      <div className=\"p-6\">\n        <h3 className=\"text-xl font-semibold text-foreground mb-2\">{project.title}</h3>\n        <p className=\"text-muted-foreground mb-4 line-clamp-2\">{project.description}</p>\n        \n        <div className=\"flex flex-wrap gap-2 mb-4\">\n          {project.technologies.slice(0, 3).map((tech, index) => (\n            <span key={index} className=\"px-2 py-1 bg-primary/10 text-primary rounded text-xs\">\n              {tech}\n            </span>\n          ))}\n          {project.technologies.length > 3 && (\n            <span className=\"px-2 py-1 bg-surface text-muted rounded text-xs\">\n              +{project.technologies.length - 3} more\n            </span>\n          )}\n        </div>\n        \n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex gap-3\">\n            {project.liveUrl && (\n              <a\n                href={project.liveUrl}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-primary hover:text-primary-dark transition-colors\"\n                aria-label=\"View live project\"\n              >\n                <ExternalLink className=\"w-5 h-5\" />\n              </a>\n            )}\n            {project.githubUrl && (\n              <a\n                href={project.githubUrl}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-foreground hover:text-primary transition-colors\"\n                aria-label=\"View source code\"\n              >\n                <Github className=\"w-5 h-5\" />\n              </a>\n            )}\n          </div>\n          \n          <Link\n            href={`/projects/${project.id}`}\n            className=\"inline-flex items-center gap-1 text-primary hover:text-primary-dark transition-colors text-sm font-medium\"\n          >\n            Details\n            <ArrowRight className=\"w-4 h-4\" />\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n}"
        },
        "src/app/components/ExperienceSection.tsx": {
          "code": "import { getExperience } from '../utils/data';\nimport { Briefcase, Calendar } from 'lucide-react';\n\nexport default async function ExperienceSection() {\n  try {\n    const experiences = await getExperience();\n    \n    return (\n      <section id=\"experience\" className=\"py-20 bg-background\">\n        <div className=\"container mx-auto px-4\">\n          <h2 className=\"text-4xl font-bold text-center text-foreground mb-12\">Work Experience</h2>\n          \n          <div className=\"max-w-4xl mx-auto\">\n            {experiences.length > 0 ? (\n              <div className=\"space-y-8\">\n                {experiences.map((exp) => (\n                  <div key={exp.id} className=\"relative pl-8 border-l-2 border-primary\">\n                    <div className=\"absolute -left-2 top-0 w-4 h-4 bg-primary rounded-full\" />\n                    \n                    <div className=\"bg-surface rounded-lg p-6\">\n                      <div className=\"flex flex-wrap items-start justify-between mb-2\">\n                        <div>\n                          <h3 className=\"text-xl font-semibold text-foreground\">{exp.position}</h3>\n                          <div className=\"flex items-center gap-2 text-primary mt-1\">\n                            <Briefcase className=\"w-4 h-4\" />\n                            <span>{exp.company}</span>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center gap-2 text-muted text-sm\">\n                          <Calendar className=\"w-4 h-4\" />\n                          <span>{exp.startDate} - {exp.endDate}</span>\n                        </div>\n                      </div>\n                      \n                      <p className=\"text-muted-foreground mb-3\">{exp.description}</p>\n                      \n                      {exp.technologies && exp.technologies.length > 0 && (\n                        <div className=\"flex flex-wrap gap-2\">\n                          {exp.technologies.map((tech, index) => (\n                            <span key={index} className=\"px-2 py-1 bg-primary/10 text-primary rounded text-xs\">\n                              {tech}\n                            </span>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <p className=\"text-center text-muted\">No experience data available.</p>\n            )}\n          </div>\n        </div>\n      </section>\n    );\n  } catch (error) {\n    return (\n      <section id=\"experience\" className=\"py-20 bg-background\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h2 className=\"text-4xl font-bold text-foreground mb-4\">Work Experience</h2>\n          <p className=\"text-muted\">Unable to load experience at this time.</p>\n        </div>\n      </section>\n    );\n  }\n}"
        },
        "src/app/components/TestimonialsSection.tsx": {
          "code": "import { getTestimonials } from '../utils/data';\nimport Image from 'next/image';\nimport { Star, Quote } from 'lucide-react';\n\nexport default async function TestimonialsSection() {\n  try {\n    const testimonials = await getTestimonials();\n    \n    if (testimonials.length === 0) {\n      return null;\n    }\n    \n    return (\n      <section id=\"testimonials\" className=\"py-20 bg-surface\">\n        <div className=\"container mx-auto px-4\">\n          <h2 className=\"text-4xl font-bold text-center text-foreground mb-12\">Client Testimonials</h2>\n          \n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {testimonials.map((testimonial) => (\n              <div key={testimonial.id} className=\"bg-background rounded-xl p-6 relative\">\n                <Quote className=\"absolute top-4 right-4 w-8 h-8 text-primary/20\" />\n                \n                <div className=\"flex items-center gap-4 mb-4\">\n                  {testimonial.imageUrl && (\n                    <div className=\"relative w-12 h-12\">\n                      <Image\n                        src={testimonial.imageUrl}\n                        alt={testimonial.name}\n                        fill\n                        className=\"rounded-full object-cover\"\n                      />\n                    </div>\n                  )}\n                  <div>\n                    <h4 className=\"font-semibold text-foreground\">{testimonial.name}</h4>\n                    <p className=\"text-sm text-muted\">{testimonial.position}</p>\n                  </div>\n                </div>\n                \n                <div className=\"flex gap-1 mb-3\">\n                  {[...Array(5)].map((_, i) => (\n                    <Star\n                      key={i}\n                      className={`w-4 h-4 ${\n                        i < testimonial.rating\n                          ? 'fill-primary text-primary'\n                          : 'text-border'\n                      }`}\n                    />\n                  ))}\n                </div>\n                \n                <p className=\"text-muted-foreground italic\">\\u201c{testimonial.text}\\u201d</p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  } catch (error) {\n    return null;\n  }\n}"
        },
        "src/app/components/ContactSection.tsx": {
          "code": "'use client';\n\nimport { useState } from 'react';\nimport { postContact } from '../utils/data';\nimport { Send, CheckCircle, AlertCircle } from 'lucide-react';\n\nexport default function ContactSection() {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    subject: '',\n    message: ''\n  });\n  const [status, setStatus] = useState<'idle' | 'loading' | 'success' | 'error'>('idle');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setStatus('loading');\n    setErrorMessage('');\n\n    try {\n      const result = await postContact(formData);\n      if (result.success) {\n        setStatus('success');\n        setFormData({ name: '', email: '', subject: '', message: '' });\n        setTimeout(() => setStatus('idle'), 5000);\n      } else {\n        throw new Error('Failed to send message');\n      }\n    } catch (error) {\n      setStatus('error');\n      setErrorMessage(error instanceof Error ? error.message : 'Failed to send message');\n      setTimeout(() => setStatus('idle'), 5000);\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value\n    }));\n  };\n\n  return (\n    <section id=\"contact\" className=\"py-20 bg-background\">\n      <div className=\"container mx-auto px-4\">\n        <h2 className=\"text-4xl font-bold text-center text-foreground mb-12\">Get In Touch</h2>\n        \n        <div className=\"max-w-2xl mx-auto\">\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <div>\n                <label htmlFor=\"name\" className=\"block text-sm font-medium text-foreground mb-2\">\n                  Name\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"name\"\n                  name=\"name\"\n                  value={formData.name}\n                  onChange={handleChange}\n                  required\n                  className=\"w-full px-4 py-2 bg-surface border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary text-foreground\"\n                />\n              </div>\n              \n              <div>\n                <label htmlFor=\"email\" className=\"block text-sm font-medium text-foreground mb-2\">\n                  Email\n                </label>\n                <input\n                  type=\"email\"\n                  id=\"email\"\n                  name=\"email\"\n                  value={formData.email}\n                  onChange={handleChange}\n                  required\n                  className=\"w-full px-4 py-2 bg-surface border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary text-foreground\"\n                />\n              </div>\n            </div>\n            \n            <div>\n              <label htmlFor=\"subject\" className=\"block text-sm font-medium text-foreground mb-2\">\n                Subject\n              </label>\n              <input\n                type=\"text\"\n                id=\"subject\"\n                name=\"subject\"\n                value={formData.subject}\n                onChange={handleChange}\n                required\n                className=\"w-full px-4 py-2 bg-surface border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary text-foreground\"\n              />\n            </div>\n            \n            <div>\n              <label htmlFor=\"message\" className=\"block text-sm font-medium text-foreground mb-2\">\n                Message\n              </label>\n              <textarea\n                id=\"message\"\n                name=\"message\"\n                value={formData.message}\n                onChange={handleChange}\n                required\n                rows={6}\n                className=\"w-full px-4 py-2 bg-surface border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary text-foreground resize-none\"\n              />\n            </div>\n            \n            {status === 'success' && (\n              <div className=\"flex items-center gap-2 p-4 bg-green-500/10 text-green-600 rounded-lg\">\n                <CheckCircle className=\"w-5 h-5\" />\n                <span>Message sent successfully!</span>\n              </div>\n            )}\n            \n            {status === 'error' && (\n              <div className=\"flex items-center gap-2 p-4 bg-red-500/10 text-red-600 rounded-lg\">\n                <AlertCircle className=\"w-5 h-5\" />\n                <span>{errorMessage || 'Failed to send message. Please try again.'}</span>\n              </div>\n            )}\n            \n            <button\n              type=\"submit\"\n              disabled={status === 'loading'}\n              className=\"w-full flex items-center justify-center gap-2 px-6 py-3 bg-primary text-white rounded-lg hover:bg-primary-dark transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {status === 'loading' ? (\n                <span>Sending...</span>\n              ) : (\n                <>\n                  <Send className=\"w-4 h-4\" />\n                  <span>Send Message</span>\n                </>\n              )}\n            </button>\n          </form>\n        </div>\n      </div>\n    </section>\n  );\n}"
        },
        "src/app/components/Footer.tsx": {
          "code": "import { Github, Linkedin, Twitter, Mail } from 'lucide-react';\n\nexport default function Footer() {\n  const currentYear = new Date().getFullYear();\n  \n  return (\n    <footer className=\"bg-surface border-t border-border\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"flex flex-col md:flex-row items-center justify-between\">\n          <p className=\"text-muted text-sm mb-4 md:mb-0\">\n            © {currentYear} Portfolio. All rights reserved.\n          </p>\n          \n          <div className=\"flex items-center gap-6\">\n            <a\n              href=\"https://github.com\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"text-muted hover:text-primary transition-colors\"\n              aria-label=\"GitHub\"\n            >\n              <Github className=\"w-5 h-5\" />\n            </a>\n            <a\n              href=\"https://linkedin.com\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"text-muted hover:text-primary transition-colors\"\n              aria-label=\"LinkedIn\"\n            >\n              <Linkedin className=\"w-5 h-5\" />\n            </a>\n            <a\n              href=\"https://twitter.com\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              className=\"text-muted hover:text-primary transition-colors\"\n              aria-label=\"Twitter\"\n            >\n              <Twitter className=\"w-5 h-5\" />\n            </a>\n            <a\n              href=\"mailto:contact@example.com\"\n              className=\"text-muted hover:text-primary transition-colors\"\n              aria-label=\"Email\"\n            >\n              <Mail className=\"w-5 h-5\" />\n            </a>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}"
        },
        "src/app/utils/data.ts": {
          "code": "const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001';\n\nexport interface AboutProfile {\n  name: string;\n  title: string;\n  bio: string;\n  email: string;\n  location: string;\n  profileImage: string;\n}\n\nexport interface Project {\n  id: number;\n  title: string;\n  description: string;\n  technologies: string[];\n  imageUrl: string;\n  liveUrl: string;\n  githubUrl: string;\n  details?: string;\n}\n\nexport interface SkillCategory {\n  id: number;\n  category: string;\n  skills: Array<{\n    name: string;\n    level: number;\n  }>;\n}\n\nexport interface Experience {\n  id: number;\n  company: string;\n  position: string;\n  startDate: string;\n  endDate: string;\n  description: string;\n  technologies: string[];\n}\n\nexport interface Education {\n  id: number;\n  institution: string;\n  degree: string;\n  startDate: string;\n  endDate: string;\n  description: string;\n}\n\nexport interface Testimonial {\n  id: number;\n  name: string;\n  position: string;\n  text: string;\n  rating: number;\n  imageUrl: string;\n}\n\nexport interface ContactMessage {\n  name: string;\n  email: string;\n  subject: string;\n  message: string;\n}\n\nexport interface ContactResult {\n  success: boolean;\n  message: string;\n  data?: {\n    id: string;\n    timestamp: string;\n  };\n}\n\nexport async function getAbout(): Promise<AboutProfile> {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/portfolio/about`, {\n      next: { revalidate: 60 }\n    });\n    if (!response.ok) throw new Error('Failed to fetch about data');\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching about:', error);\n    throw error;\n  }\n}\n\nexport async function getProjects(): Promise<Project[]> {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/portfolio/projects`, {\n      next: { revalidate: 60 }\n    });\n    if (!response.ok) throw new Error('Failed to fetch projects');\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching projects:', error);\n    throw error;\n  }\n}\n\nexport async function getProject(id: number): Promise<Project> {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/portfolio/projects/${id}`, {\n      next: { revalidate: 60 }\n    });\n    if (!response.ok) throw new Error('Failed to fetch project');\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching project:', error);\n    throw error;\n  }\n}\n\nexport async function getSkills(): Promise<SkillCategory[]> {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/skills`, {\n      next: { revalidate: 60 }\n    });\n    if (!response.ok) throw new Error('Failed to fetch skills');\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching skills:', error);\n    throw error;\n  }\n}\n\nexport async function getExperience(): Promise<Experience[]> {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/portfolio/experience`, {\n      next: { revalidate: 60 }\n    });\n    if (!response.ok) throw new Error('Failed to fetch experience');\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching experience:', error);\n    throw error;\n  }\n}\n\nexport async function getEducation(): Promise<Education[]> {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/portfolio/education`, {\n      next: { revalidate: 60 }\n    });\n    if (!response.ok) throw new Error('Failed to fetch education');\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching education:', error);\n    throw error;\n  }\n}\n\nexport async function getTestimonials(): Promise<Testimonial[]> {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/portfolio/testimonials`, {\n      next: { revalidate: 60 }\n    });\n    if (!response.ok) throw new Error('Failed to fetch testimonials');\n    return await response.json();\n  } catch (error) {\n    console.error('Error fetching testimonials:', error);\n    throw error;\n  }\n}\n\nexport async function postContact(data: ContactMessage): Promise<ContactResult> {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/contact`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    });\n    if (!response.ok) throw new Error('Failed to send message');\n    return await response.json();\n  } catch (error) {\n    console.error('Error sending contact message:', error);\n    throw error;\n  }\n}"
        },
        "src/app/globals.css": {
          "code": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 84% 4.9%;\n    --surface: 210 40% 96.1%;\n    --muted: 210 40% 96.1%;\n    --muted-foreground: 215.4 16.3% 46.9%;\n    --primary: 221.2 83.2% 53.3%;\n    --primary-dark: 221.2 83.2% 43.3%;\n    --primary-foreground: 210 40% 98%;\n    --border: 214.3 31.8% 91.4%;\n    --radius: 0.5rem;\n  }\n\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n    --surface: 217.2 32.6% 17.5%;\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n    --primary: 217.2 91.2% 59.8%;\n    --primary-dark: 217.2 91.2% 49.8%;\n    --primary-foreground: 222.2 47.4% 11.2%;\n    --border: 217.2 32.6% 17.5%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n}\n\n@layer utilities {\n  .line-clamp-2 {\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n}"
        },
        "tailwind.config.js": {
          "code": "/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/components/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/app/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n  theme: {\n    extend: {\n      colors: {\n        background: 'hsl(var(--background))',\n        foreground: 'hsl(var(--foreground))',\n        surface: 'hsl(var(--surface))',\n        muted: {\n          DEFAULT: 'hsl(var(--muted))',\n          foreground: 'hsl(var(--muted-foreground))',\n        },\n        primary: {\n          DEFAULT: 'hsl(var(--primary))',\n          dark: 'hsl(var(--primary-dark))',\n          foreground: 'hsl(var(--primary-foreground))',\n        },\n        border: 'hsl(var(--border))',\n      },\n      borderRadius: {\n        lg: 'var(--radius)',\n        md: 'calc(var(--radius) - 2px)',\n        sm: 'calc(var(--radius) - 4px)',\n      },\n    },\n  },\n  plugins: [],\n}"
        },
        "next.config.ts": {
          "code": "import type { NextConfig } from 'next';\n\nconst nextConfig: NextConfig = {\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 'example.com',\n      },\n      {\n        protocol: 'https',\n        hostname: 'images.unsplash.com',\n      },\n      {\n        protocol: 'https',\n        hostname: '*.githubusercontent.com',\n      },\n    ],\n  },\n};\n\nexport default nextConfig;"
        },
        ".env.local": {
          "code": "NEXT_PUBLIC_API_URL=http://localhost:3001"
        }
      },
      "libraries": [
        "lucide-react"
      ]
    }
  }
}