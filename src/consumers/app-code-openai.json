{
  "status": "finished",
  "code": {
    "app": {
      "fileStructure": {
        "src/app/page.tsx": {
          "code": "import { Suspense } from \"react\";\nimport { getAbout, getProjects, getSkills, getBlogPosts, About, Project, Skill, BlogPost } from \"./utils/data\";\nimport { ContactForm, SectionHeader } from \"./components/Component1\";\nimport { AboutCard, ProjectsGrid, SkillsCloud } from \"./components/Component2\";\nimport { BlogList } from \"./components/Component3\";\n\nfunction SectionSkeleton(props: { title: string; lines?: number }) {\n  const lines = props.lines ?? 3;\n  return (\n    <section className=\"rounded-2xl bg-surface p-6 shadow-md border border-border\">\n      <div className=\"h-7 w-40 bg-muted/20 rounded mb-4 animate-pulse\" />\n      <div className=\"space-y-2\">\n        {Array.from({ length: lines }).map((_, i) => (\n          <div key={i} className=\"h-4 w-full bg-muted/10 rounded animate-pulse\" />\n        ))}\n      </div>\n    </section>\n  );\n}\n\nasync function AboutSection() {\n  try {\n    const about = await getAbout();\n    return (\n      <section id=\"about\" className=\"scroll-mt-24\">\n        <SectionHeader title=\"About\" subtitle=\"Who I am and what I do\" />\n        <AboutCard about={about as About} />\n      </section>\n    );\n  } catch (e: any) {\n    return (\n      <section id=\"about\" className=\"scroll-mt-24\">\n        <SectionHeader title=\"About\" subtitle=\"Who I am and what I do\" />\n        <div className=\"rounded-xl bg-danger/10 text-danger p-4 border border-danger/30\">{e?.message ?? \"Failed to load about content.\"}</div>\n      </section>\n    );\n  }\n}\n\nasync function ProjectsSection() {\n  try {\n    const projects = await getProjects();\n    return (\n      <section id=\"projects\" className=\"scroll-mt-24\">\n        <SectionHeader title=\"Projects\" subtitle=\"Things I've built\" />\n        {projects.length === 0 ? (\n          <div className=\"rounded-xl bg-muted/10 text-muted p-4 border border-border\">No projects published yet.</div>\n        ) : (\n          <ProjectsGrid projects={projects as Project[]} />\n        )}\n      </section>\n    );\n  } catch (e: any) {\n    return (\n      <section id=\"projects\" className=\"scroll-mt-24\">\n        <SectionHeader title=\"Projects\" subtitle=\"Things I've built\" />\n        <div className=\"rounded-xl bg-danger/10 text-danger p-4 border border-danger/30\">{e?.message ?? \"Failed to load projects.\"}</div>\n      </section>\n    );\n  }\n}\n\nasync function SkillsSection() {\n  try {\n    const skills = await getSkills();\n    return (\n      <section id=\"skills\" className=\"scroll-mt-24\">\n        <SectionHeader title=\"Skills\" subtitle=\"Technologies I work with\" />\n        {skills.length === 0 ? (\n          <div className=\"rounded-xl bg-muted/10 text-muted p-4 border border-border\">No skills added yet.</div>\n        ) : (\n          <SkillsCloud skills={skills as Skill[]} />\n        )}\n      </section>\n    );\n  } catch (e: any) {\n    return (\n      <section id=\"skills\" className=\"scroll-mt-24\">\n        <SectionHeader title=\"Skills\" subtitle=\"Technologies I work with\" />\n        <div className=\"rounded-xl bg-danger/10 text-danger p-4 border border-danger/30\">{e?.message ?? \"Failed to load skills.\"}</div>\n      </section>\n    );\n  }\n}\n\nasync function BlogSection() {\n  try {\n    const posts = await getBlogPosts();\n    return (\n      <section id=\"blog\" className=\"scroll-mt-24\">\n        <SectionHeader title=\"Blog\" subtitle=\"Latest articles and updates\" />\n        {posts.length === 0 ? (\n          <div className=\"rounded-xl bg-muted/10 text-muted p-4 border border-border\">No posts published yet.</div>\n        ) : (\n          <BlogList posts={posts as BlogPost[]} />\n        )}\n      </section>\n    );\n  } catch (e: any) {\n    return (\n      <section id=\"blog\" className=\"scroll-mt-24\">\n        <SectionHeader title=\"Blog\" subtitle=\"Latest articles and updates\" />\n        <div className=\"rounded-xl bg-danger/10 text-danger p-4 border border-danger/30\">{e?.message ?? \"Failed to load posts.\"}</div>\n      </section>\n    );\n  }\n}\n\nexport default async function Home() {\n  return (\n    <main className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-10 space-y-16\">\n      <section className=\"rounded-2xl bg-gradient-to-br from-primary/10 to-surface p-8 border border-border shadow-lg\">\n        <div className=\"flex flex-col gap-4\">\n          <h1 className=\"text-3xl sm:text-4xl font-extrabold tracking-tight\">Welcome to my portfolio</h1>\n          <p className=\"text-muted max-w-2xl\">Explore my work, the technologies I use, and thoughts I share. Get in touch if you'd like to collaborate.</p>\n          <div className=\"flex gap-3\">\n            <a href=\"#projects\" className=\"inline-flex items-center rounded-lg bg-primary text-white px-4 py-2 text-sm font-medium shadow hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-primary\">View Projects</a>\n            <a href=\"#contact\" className=\"inline-flex items-center rounded-lg bg-surface text-foreground px-4 py-2 text-sm font-medium border border-border hover:bg-surface/80\">Contact Me</a>\n          </div>\n        </div>\n      </section>\n\n      <Suspense fallback={<SectionSkeleton title=\"About\" lines={4} />}>\n        {/* @ts-expect-error Async Server Component */}\n        <AboutSection />\n      </Suspense>\n\n      <Suspense fallback={<SectionSkeleton title=\"Projects\" lines={6} />}>\n        {/* @ts-expect-error Async Server Component */}\n        <ProjectsSection />\n      </Suspense>\n\n      <Suspense fallback={<SectionSkeleton title=\"Skills\" lines={3} />}>\n        {/* @ts-expect-error Async Server Component */}\n        <SkillsSection />\n      </Suspense>\n\n      <Suspense fallback={<SectionSkeleton title=\"Blog\" lines={4} />}>\n        {/* @ts-expect-error Async Server Component */}\n        <BlogSection />\n      </Suspense>\n\n      <section id=\"contact\" className=\"scroll-mt-24\">\n        <SectionHeader title=\"Contact\" subtitle=\"I'd love to hear from you\" />\n        <div className=\"rounded-2xl bg-surface p-6 border border-border shadow-md\">\n          <ContactForm />\n        </div>\n      </section>\n    </main>\n  );\n}\n"
        },
        "src/app/layout.tsx": {
          "code": "import type { Metadata } from \"next\";\nimport \"./globals.css\";\n\nexport const metadata: Metadata = {\n  title: \"Portfolio\",\n  description: \"A simple portfolio website powered by Next.js and a REST backend\",\n};\n\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"en\" className=\"h-full\">\n      <body className=\"min-h-full bg-background text-foreground antialiased\">\n        <header className=\"sticky top-0 z-40 backdrop-blur border-b border-border bg-background/70\">\n          <nav className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-3 flex items-center justify-between\">\n            <a href=\"#\" className=\"font-semibold\">Portfolio</a>\n            <div className=\"hidden sm:flex items-center gap-6 text-sm text-muted\">\n              <a className=\"hover:text-foreground\" href=\"#about\">About</a>\n              <a className=\"hover:text-foreground\" href=\"#projects\">Projects</a>\n              <a className=\"hover:text-foreground\" href=\"#skills\">Skills</a>\n              <a className=\"hover:text-foreground\" href=\"#blog\">Blog</a>\n              <a className=\"hover:text-foreground\" href=\"#contact\">Contact</a>\n            </div>\n          </nav>\n        </header>\n        {children}\n        <footer className=\"mt-16 border-t border-border\">\n          <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8 text-sm text-muted flex items-center justify-between\">\n            <p>Â© {new Date().getFullYear()} Portfolio</p>\n            <p>Built with Next.js</p>\n          </div>\n        </footer>\n      </body>\n    </html>\n  );\n}\n"
        },
        "src/app/components/Component1.tsx": {
          "code": "\"use client\";\nimport { useState } from \"react\";\nimport { postContact } from \"../utils/data\";\nimport { Send, Loader2 } from \"lucide-react\";\n\nexport function SectionHeader({ title, subtitle }: { title: string; subtitle?: string }) {\n  return (\n    <div className=\"mb-6\">\n      <h2 className=\"text-2xl font-bold mb-1\">{title}</h2>\n      {subtitle ? <p className=\"text-muted\">{subtitle}</p> : null}\n    </div>\n  );\n}\n\nexport function ContactForm() {\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [status, setStatus] = useState<\"idle\" | \"submitting\" | \"success\" | \"error\">(\"idle\");\n  const [error, setError] = useState<string | null>(null);\n\n  const validate = () => {\n    if (!name.trim()) return \"Name is required\";\n    if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)) return \"A valid email is required\";\n    if (!message.trim() || message.trim().length < 10) return \"Please enter a message of at least 10 characters\";\n    return null;\n  };\n\n  const onSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const err = validate();\n    if (err) {\n      setError(err);\n      setStatus(\"error\");\n      return;\n    }\n    setStatus(\"submitting\");\n    setError(null);\n    try {\n      const res = await postContact({ name, email, message });\n      if (res.success) {\n        setStatus(\"success\");\n        setName(\"\");\n        setEmail(\"\");\n        setMessage(\"\");\n      } else {\n        setStatus(\"error\");\n        setError(res.message || \"Something went wrong\");\n      }\n    } catch (e: any) {\n      setStatus(\"error\");\n      setError(e?.message ?? \"Failed to send message\");\n    }\n  };\n\n  return (\n    <form onSubmit={onSubmit} className=\"space-y-4\">\n      <div className=\"grid sm:grid-cols-2 gap-4\">\n        <div className=\"space-y-2\">\n          <label htmlFor=\"name\" className=\"text-sm\">Name</label>\n          <input id=\"name\" name=\"name\" value={name} onChange={(e) => setName(e.target.value)} placeholder=\"Your name\" className=\"w-full rounded-lg border border-border bg-background px-3 py-2 outline-none focus:ring-2 focus:ring-primary\" />\n        </div>\n        <div className=\"space-y-2\">\n          <label htmlFor=\"email\" className=\"text-sm\">Email</label>\n          <input id=\"email\" name=\"email\" type=\"email\" value={email} onChange={(e) => setEmail(e.target.value)} placeholder=\"you@example.com\" className=\"w-full rounded-lg border border-border bg-background px-3 py-2 outline-none focus:ring-2 focus:ring-primary\" />\n        </div>\n      </div>\n      <div className=\"space-y-2\">\n        <label htmlFor=\"message\" className=\"text-sm\">Message</label>\n        <textarea id=\"message\" name=\"message\" value={message} onChange={(e) => setMessage(e.target.value)} placeholder=\"How can I help?\" rows={5} className=\"w-full rounded-lg border border-border bg-background px-3 py-2 outline-none focus:ring-2 focus:ring-primary\" />\n      </div>\n      {status === \"error\" && error ? (\n        <div className=\"rounded-lg border border-danger/30 bg-danger/10 text-danger px-3 py-2 text-sm\">{error}</div>\n      ) : null}\n      {status === \"success\" ? (\n        <div className=\"rounded-lg border border-success/30 bg-success/10 text-success px-3 py-2 text-sm\">Your message has been sent.</div>\n      ) : null}\n      <div className=\"flex items-center gap-3\">\n        <button type=\"submit\" disabled={status === \"submitting\"} className=\"inline-flex items-center gap-2 rounded-lg bg-primary text-white px-4 py-2 text-sm font-medium shadow hover:opacity-90 disabled:opacity-60 disabled:cursor-not-allowed focus:outline-none focus:ring-2 focus:ring-primary\">\n          {status === \"submitting\" ? <Loader2 className=\"w-4 h-4 animate-spin\" /> : <Send className=\"w-4 h-4\" />}<span>Send</span>\n        </button>\n      </div>\n    </form>\n  );\n}\n"
        },
        "src/app/components/Component2.tsx": {
          "code": "import Image from \"next/image\";\nimport { ExternalLink, Github, MapPin, Mail } from \"lucide-react\";\nimport type { About, Project, Skill } from \"../utils/data\";\n\nfunction Tag({ label }: { label: string }) {\n  return <span className=\"inline-flex items-center rounded-full border border-border bg-background text-muted px-2 py-0.5 text-xs\">{label}</span>;\n}\n\nexport function AboutCard({ about }: { about: About }) {\n  return (\n    <div className=\"rounded-2xl bg-surface border border-border p-6 shadow-md\">\n      <div className=\"flex flex-col gap-4\">\n        <div>\n          <h3 className=\"text-xl font-semibold\">{about.name}</h3>\n          <p className=\"text-muted\">{about.title}</p>\n        </div>\n        <p className=\"leading-relaxed text-sm sm:text-base\">{about.bio}</p>\n        <div className=\"flex flex-wrap items-center gap-3 text-sm\">\n          <div className=\"inline-flex items-center gap-2 text-muted\"><MapPin className=\"w-4 h-4\" /><span>{about.location}</span></div>\n          <a className=\"inline-flex items-center gap-2 hover:text-foreground\" href={`mailto:${about.email}`}><Mail className=\"w-4 h-4\" /><span>{about.email}</span></a>\n        </div>\n        <div className=\"flex flex-wrap gap-3 text-sm\">\n          <a className=\"inline-flex items-center gap-2 rounded-lg border border-border bg-background px-3 py-1 hover:bg-background/80\" href={`https://github.com/${about.social.github}`} target=\"_blank\" rel=\"noreferrer\"><Github className=\"w-4 h-4\" />GitHub</a>\n          <a className=\"inline-flex items-center gap-2 rounded-lg border border-border bg-background px-3 py-1 hover:bg-background/80\" href={`https://www.linkedin.com/in/${about.social.linkedin}`} target=\"_blank\" rel=\"noreferrer\">LinkedIn</a>\n          <a className=\"inline-flex items-center gap-2 rounded-lg border border-border bg-background px-3 py-1 hover:bg-background/80\" href={`https://twitter.com/${about.social.twitter}`} target=\"_blank\" rel=\"noreferrer\">Twitter</a>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport function ProjectsGrid({ projects }: { projects: Project[] }) {\n  return (\n    <div className=\"grid sm:grid-cols-2 lg:grid-cols-3 gap-6\">\n      {projects.map((p) => (\n        <ProjectCard key={p.id} project={p} />\n      ))}\n    </div>\n  );\n}\n\nexport function ProjectCard({ project }: { project: Project }) {\n  const cover = project.images?.[0] || \"https://images.unsplash.com/photo-1522071820081-009f0129c71c?auto=format&fit=crop&w=800&q=60\";\n  return (\n    <article className=\"flex flex-col rounded-2xl bg-surface border border-border overflow-hidden shadow-md\">\n      <div className=\"relative h-40 w-full\">\n        <Image src={cover} alt={project.title} fill className=\"object-cover\" sizes=\"(max-width: 768px) 100vw, 33vw\" />\n      </div>\n      <div className=\"p-4 flex flex-1 flex-col gap-3\">\n        <div className=\"flex items-start justify-between gap-2\">\n          <h3 className=\"font-semibold leading-tight\">{project.title}</h3>\n          {project.featured ? <span className=\"text-xs px-2 py-0.5 rounded-full bg-primary/15 text-primary border border-primary/30\">Featured</span> : null}\n        </div>\n        <p className=\"text-sm text-muted line-clamp-3\">{project.description}</p>\n        {project.tags?.length ? (\n          <div className=\"flex flex-wrap gap-2 mt-auto\">\n            {project.tags.map((t) => (\n              <Tag key={t} label={t} />\n            ))}\n          </div>\n        ) : null}\n        <div className=\"flex items-center gap-3 pt-1\">\n          {project.url ? (\n            <a href={project.url} target=\"_blank\" rel=\"noreferrer\" className=\"inline-flex items-center gap-1.5 text-sm rounded-md border border-border bg-background px-3 py-1.5 hover:bg-background/80\"><ExternalLink className=\"w-4 h-4\" />Live</a>\n          ) : null}\n          {project.repo ? (\n            <a href={project.repo} target=\"_blank\" rel=\"noreferrer\" className=\"inline-flex items-center gap-1.5 text-sm rounded-md border border-border bg-background px-3 py-1.5 hover:bg-background/80\"><Github className=\"w-4 h-4\" />Repo</a>\n          ) : null}\n        </div>\n      </div>\n    </article>\n  );\n}\n\nexport function SkillsCloud({ skills }: { skills: Skill[] }) {\n  return (\n    <div className=\"rounded-2xl bg-surface border border-border p-6 shadow-md\">\n      <div className=\"flex flex-wrap gap-3\">\n        {skills.map((s) => (\n          <div key={s.id} className=\"inline-flex items-center gap-2 rounded-full border border-border bg-background px-3 py-1 text-sm\">\n            <span className=\"font-medium\">{s.name}</span>\n            <span className=\"text-muted text-xs\">{s.level} Â· {s.years}y</span>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n"
        },
        "src/app/components/Component3.tsx": {
          "code": "import type { BlogPost } from \"../utils/data\";\n\nfunction Tag({ label }: { label: string }) {\n  return <span className=\"inline-flex items-center rounded-full border border-border bg-background text-muted px-2 py-0.5 text-xs\">{label}</span>;\n}\n\nexport function BlogList({ posts }: { posts: BlogPost[] }) {\n  return (\n    <div className=\"grid sm:grid-cols-2 gap-6\">\n      {posts.map((p) => (\n        <article key={p.id} className=\"rounded-2xl bg-surface border border-border p-5 shadow-md flex flex-col gap-3\">\n          <div className=\"flex items-center justify-between gap-2\">\n            <h3 className=\"font-semibold leading-tight\">{p.title}</h3>\n            {p.publishedAt ? <time className=\"text-xs text-muted\" dateTime={new Date(p.publishedAt).toISOString()}>{new Date(p.publishedAt).toLocaleDateString()}</time> : null}\n          </div>\n          <p className=\"text-sm text-muted line-clamp-3\">{p.excerpt}</p>\n          {p.tags?.length ? (\n            <div className=\"flex flex-wrap gap-2\">\n              {p.tags.map((t) => (\n                <Tag key={t} label={t} />\n              ))}\n            </div>\n          ) : null}\n          <div className=\"text-xs text-muted\">Slug: {p.slug}</div>\n        </article>\n      ))}\n    </div>\n  );\n}\n"
        },
        "src/app/utils/data.ts": {
          "code": "import { z } from \"zod\";\n\nconst BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL ?? \"http://localhost:3001\";\n\nconst aboutSchema = z.object({\n  bio: z.string(),\n  email: z.string(),\n  location: z.string(),\n  name: z.string(),\n  social: z.object({ github: z.string(), linkedin: z.string(), twitter: z.string() }),\n  title: z.string(),\n  updatedAt: z.string(),\n});\n\nconst projectSchema = z.object({\n  createdAt: z.string(),\n  description: z.string(),\n  featured: z.boolean(),\n  id: z.string(),\n  images: z.array(z.string()),\n  published: z.boolean(),\n  repo: z.string(),\n  tags: z.array(z.string()),\n  title: z.string(),\n  updatedAt: z.string(),\n  url: z.string(),\n});\n\nconst skillSchema = z.object({ id: z.string(), level: z.string(), name: z.string(), years: z.number() });\n\nconst blogPostSchema = z.object({\n  createdAt: z.string(),\n  excerpt: z.string(),\n  id: z.string(),\n  published: z.boolean(),\n  publishedAt: z.string().nullable(),\n  slug: z.string(),\n  tags: z.array(z.string()),\n  title: z.string(),\n  updatedAt: z.string(),\n});\n\nconst blogPostDetailSchema = blogPostSchema.extend({ content: z.string() });\n\nconst contactResultSchema = z.object({ message: z.string(), success: z.boolean() });\n\nexport type About = z.infer<typeof aboutSchema>;\nexport type Project = z.infer<typeof projectSchema>;\nexport type Skill = z.infer<typeof skillSchema>;\nexport type BlogPost = z.infer<typeof blogPostSchema>;\nexport type BlogPostDetail = z.infer<typeof blogPostDetailSchema>;\nexport type ContactResult = z.infer<typeof contactResultSchema>;\n\nexport type Experience = never;\nexport type Education = never;\nexport type Testimonial = never;\n\nasync function fetchJSON<T>(path: string, init?: RequestInit & { revalidate?: number }, schema?: z.ZodTypeAny): Promise<T> {\n  const url = `${BASE_URL}${path.startsWith(\"/\") ? \"\" : \"/\"}${path}`;\n  const { revalidate, ...rest } = init || {};\n  const options: RequestInit & { next?: { revalidate?: number } } = {\n    ...rest,\n  };\n  if (!rest || !(\"cache\" in rest) || !(\"next\" in rest)) {\n    options.next = { revalidate: revalidate ?? 60 };\n  }\n  const res = await fetch(url, options as RequestInit);\n  if (!res.ok) {\n    const txt = await res.text().catch(() => \"\");\n    throw new Error(`Request failed ${res.status}: ${txt || res.statusText}`);\n  }\n  const data = await res.json();\n  if (schema) {\n    const parsed = schema.safeParse(data);\n    if (!parsed.success) {\n      throw new Error(\"Unexpected response shape\");\n    }\n    return parsed.data as T;\n  }\n  return data as T;\n}\n\nexport async function getAbout(): Promise<About> {\n  try {\n    return await fetchJSON<About>(\"/api/about\", { next: { revalidate: 600 } }, aboutSchema);\n  } catch (e: any) {\n    throw new Error(e?.message || \"Failed to fetch About\");\n  }\n}\n\nexport async function getProjects(): Promise<Project[]> {\n  try {\n    return await fetchJSON<Project[]>(\"/api/projects\", { next: { revalidate: 120 } }, z.array(projectSchema));\n  } catch (e: any) {\n    throw new Error(e?.message || \"Failed to fetch Projects\");\n  }\n}\n\nexport async function getProject(id: number): Promise<Project> {\n  try {\n    return await fetchJSON<Project>(`/api/projects/${String(id)}`, { next: { revalidate: 120 } }, projectSchema);\n  } catch (e: any) {\n    throw new Error(e?.message || \"Failed to fetch Project\");\n  }\n}\n\nexport async function getSkills(): Promise<Skill[]> {\n  try {\n    return await fetchJSON<Skill[]>(\"/api/skills\", { next: { revalidate: 600 } }, z.array(skillSchema));\n  } catch (e: any) {\n    throw new Error(e?.message || \"Failed to fetch Skills\");\n  }\n}\n\nexport async function getBlogPosts(): Promise<BlogPost[]> {\n  try {\n    return await fetchJSON<BlogPost[]>(\"/api/posts\", { next: { revalidate: 120 } }, z.array(blogPostSchema));\n  } catch (e: any) {\n    throw new Error(e?.message || \"Failed to fetch Blog Posts\");\n  }\n}\n\nexport async function getBlogPost(slug: string): Promise<BlogPostDetail> {\n  try {\n    return await fetchJSON<BlogPostDetail>(`/api/posts/${encodeURIComponent(slug)}`, { next: { revalidate: 120 } }, blogPostDetailSchema);\n  } catch (e: any) {\n    throw new Error(e?.message || \"Failed to fetch Blog Post\");\n  }\n}\n\nexport async function getExperience(): Promise<Experience[]> {\n  return [] as Experience[];\n}\n\nexport async function getEducation(): Promise<Education[]> {\n  return [] as Education[];\n}\n\nexport async function getTestimonials(): Promise<Testimonial[]> {\n  return [] as Testimonial[];\n}\n\nexport async function postContact(input: { name: string; email: string; message: string }): Promise<ContactResult> {\n  try {\n    const res = await fetch(`${BASE_URL}/api/contact`, {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(input),\n    });\n    if (!res.ok) {\n      const txt = await res.text().catch(() => \"\");\n      throw new Error(txt || \"Failed to send message\");\n    }\n    const json = await res.json();\n    const parsed = contactResultSchema.safeParse(json);\n    if (!parsed.success) {\n      throw new Error(\"Unexpected response shape\");\n    }\n    return parsed.data;\n  } catch (e: any) {\n    throw new Error(e?.message || \"Failed to send message\");\n  }\n}\n"
        },
        "src/app/globals.css": {
          "code": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --color-background: 16 18 24;\n    --color-foreground: 243 244 246;\n    --color-surface: 21 24 33;\n    --color-border: 38 44 58;\n    --color-muted: 148 163 184;\n    --color-primary: 124 58 237;\n    --color-success: 16 185 129;\n    --color-warning: 245 158 11;\n    --color-danger: 239 68 68;\n  }\n}\n\n@layer base {\n  body { @apply bg-background text-foreground; }\n}\n\n@layer components {\n}\n\n@layer utilities {\n}\n"
        },
        "tailwind.config.js": {
          "code": "module.exports = {\n  content: [\"./src/**/*.{ts,tsx}\"],\n  theme: {\n    extend: {\n      colors: {\n        background: \"rgb(var(--color-background) / <alpha-value>)\",\n        foreground: \"rgb(var(--color-foreground) / <alpha-value>)\",\n        surface: \"rgb(var(--color-surface) / <alpha-value>)\",\n        border: \"rgb(var(--color-border) / <alpha-value>)\",\n        muted: \"rgb(var(--color-muted) / <alpha-value>)\",\n        primary: \"rgb(var(--color-primary) / <alpha-value>)\",\n        success: \"rgb(var(--color-success) / <alpha-value>)\",\n        warning: \"rgb(var(--color-warning) / <alpha-value>)\",\n        danger: \"rgb(var(--color-danger) / <alpha-value>)\",\n      },\n    },\n  },\n  plugins: [],\n};\n"
        },
        "next.config.ts": {
          "code": "import type { NextConfig } from \"next\";\n\nconst nextConfig: NextConfig = {\n  images: {\n    remotePatterns: [\n      { protocol: \"https\", hostname: \"images.unsplash.com\" },\n      { protocol: \"https\", hostname: \"example.com\" }\n    ],\n  },\n  experimental: {\n    typedRoutes: true,\n  },\n};\n\nexport default nextConfig;\n"
        }
      },
      "libraries": [
        "lucide-react",
        "zod"
      ]
    }
  }
}