{
  "status": "finished",
  "code": {
    "app": {
      "fileStructure": {
        "src/app/page.tsx": {
         "code": "import Hero from './components/Hero';\nimport About from './components/About';\nimport Skills from './components/Skills';\nimport Experience from './components/Experience';\nimport Projects from './components/Projects';\nimport Services from './components/Services';\nimport Testimonials from './components/Testimonials';\nimport Contact from './components/Contact';\n\nexport default function Home() {\n  return (\n    <main className=\"min-h-screen bg-background\">\n      <Hero />\n      <About />\n      <Skills />\n      <Experience />\n      <Projects />\n      <Services />\n      <Testimonials />\n      <Contact />\n    </main>\n  );\n}"
        },
        "src/app/layout.tsx": {
         "code": "import type { Metadata } from 'next';\nimport { Inter } from 'next/font/google';\nimport './globals.css';\nimport Navigation from './components/Navigation';\nimport Footer from './components/Footer';\n\nconst inter = Inter({ subsets: ['latin'] });\n\nexport const metadata: Metadata = {\n  title: 'Portfolio - Full Stack Developer',\n  description: 'Professional portfolio showcasing web development projects and skills',\n};\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\" className=\"scroll-smooth\">\n      <body className={inter.className}>\n        <Navigation />\n        {children}\n        <Footer />\n      </body>\n    </html>\n  );\n}"
        },
        "src/app/components/Navigation.tsx": {
         "code": "'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Menu, X } from 'lucide-react';\n\nexport default function Navigation() {\n  const [isScrolled, setIsScrolled] = useState(false);\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setIsScrolled(window.scrollY > 20);\n    };\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  const navLinks = [\n    { href: '#home', label: 'Home' },\n    { href: '#about', label: 'About' },\n    { href: '#skills', label: 'Skills' },\n    { href: '#experience', label: 'Experience' },\n    { href: '#projects', label: 'Projects' },\n    { href: '#services', label: 'Services' },\n    { href: '#testimonials', label: 'Testimonials' },\n    { href: '#contact', label: 'Contact' },\n  ];\n\n  return (\n    <nav className={`fixed top-0 w-full z-50 transition-all duration-300 ${isScrolled ? 'bg-surface/95 backdrop-blur-md shadow-lg' : 'bg-transparent'}`}>\n      <div className=\"container mx-auto px-4\">\n        <div className=\"flex items-center justify-between h-16\">\n          <a href=\"#home\" className=\"text-2xl font-bold text-primary\">\n            Portfolio\n          </a>\n\n          <div className=\"hidden md:flex items-center space-x-8\">\n            {navLinks.map((link) => (\n              <a\n                key={link.href}\n                href={link.href}\n                className=\"text-text-secondary hover:text-primary transition-colors duration-200\"\n              >\n                {link.label}\n              </a>\n            ))}\n          </div>\n\n          <button\n            onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n            className=\"md:hidden text-text-primary\"\n          >\n            {isMobileMenuOpen ? <X size={24} /> : <Menu size={24} />}\n          </button>\n        </div>\n\n        {isMobileMenuOpen && (\n          <div className=\"md:hidden bg-surface border-t border-border\">\n            <div className=\"py-4 space-y-2\">\n              {navLinks.map((link) => (\n                <a\n                  key={link.href}\n                  href={link.href}\n                  onClick={() => setIsMobileMenuOpen(false)}\n                  className=\"block px-4 py-2 text-text-secondary hover:text-primary hover:bg-surface-hover transition-colors duration-200\"\n                >\n                  {link.label}\n                </a>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </nav>\n  );\n}"
        },
        "src/app/components/Hero.tsx": {
         "code": "import { getAbout } from '../utils/data';\nimport { ArrowDown, Github, Linkedin, Twitter, FileText } from 'lucide-react';\n\nexport default async function Hero() {\n  let about;\n  let error = null;\n\n  try {\n    about = await getAbout();\n  } catch (e) {\n    error = e instanceof Error ? e.message : 'Failed to load data';\n  }\n\n  if (error) {\n    return (\n      <section id=\"home\" className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-background to-surface\">\n        <div className=\"text-center\">\n          <p className=\"text-error\">Unable to load profile information</p>\n        </div>\n      </section>\n    );\n  }\n\n  if (!about) {\n    return (\n      <section id=\"home\" className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-background to-surface\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 w-48 bg-surface-hover rounded mb-4\"></div>\n          <div className=\"h-12 w-64 bg-surface-hover rounded\"></div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section id=\"home\" className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-background to-surface relative overflow-hidden\">\n      <div className=\"absolute inset-0 bg-grid-pattern opacity-5\"></div>\n      <div className=\"container mx-auto px-4 py-20 relative z-10\">\n        <div className=\"text-center\">\n          <div className=\"mb-8\">\n            {about.avatar && (\n              <img\n                src={about.avatar}\n                alt={about.name}\n                className=\"w-32 h-32 rounded-full mx-auto mb-6 border-4 border-primary shadow-xl\"\n              />\n            )}\n            <h1 className=\"text-5xl md:text-7xl font-bold text-text-primary mb-4\">\n              {about.name}\n            </h1>\n            <h2 className=\"text-2xl md:text-3xl text-primary mb-6\">\n              {about.title}\n            </h2>\n            <p className=\"text-lg text-text-secondary max-w-2xl mx-auto mb-8\">\n              {about.bio}\n            </p>\n          </div>\n\n          <div className=\"flex justify-center space-x-4 mb-12\">\n            {about.social?.github && (\n              <a\n                href={about.social.github}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"p-3 bg-surface hover:bg-surface-hover rounded-full transition-colors duration-200\"\n              >\n                <Github className=\"w-6 h-6 text-text-primary\" />\n              </a>\n            )}\n            {about.social?.linkedin && (\n              <a\n                href={about.social.linkedin}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"p-3 bg-surface hover:bg-surface-hover rounded-full transition-colors duration-200\"\n              >\n                <Linkedin className=\"w-6 h-6 text-text-primary\" />\n              </a>\n            )}\n            {about.social?.twitter && (\n              <a\n                href={about.social.twitter}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"p-3 bg-surface hover:bg-surface-hover rounded-full transition-colors duration-200\"\n              >\n                <Twitter className=\"w-6 h-6 text-text-primary\" />\n              </a>\n            )}\n            {about.resume && (\n              <a\n                href={about.resume}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"p-3 bg-primary hover:bg-primary-hover text-white rounded-full transition-colors duration-200\"\n              >\n                <FileText className=\"w-6 h-6\" />\n              </a>\n            )}\n          </div>\n\n          <a\n            href=\"#about\"\n            className=\"inline-flex items-center gap-2 px-8 py-3 bg-primary hover:bg-primary-hover text-white rounded-full transition-all duration-200 transform hover:scale-105\"\n          >\n            Learn More\n            <ArrowDown className=\"w-5 h-5 animate-bounce\" />\n          </a>\n        </div>\n      </div>\n    </section>\n  );\n}"
        },
        "src/app/components/About.tsx": {
         "code": "import { getAbout } from '../utils/data';\nimport { Mail, Phone, MapPin } from 'lucide-react';\n\nexport default async function About() {\n  let about;\n  let error = null;\n\n  try {\n    about = await getAbout();\n  } catch (e) {\n    error = e instanceof Error ? e.message : 'Failed to load data';\n  }\n\n  if (error || !about) {\n    return null;\n  }\n\n  return (\n    <section id=\"about\" className=\"py-20 bg-surface\">\n      <div className=\"container mx-auto px-4\">\n        <h2 className=\"text-4xl font-bold text-center text-text-primary mb-12\">\n          About Me\n        </h2>\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"bg-background rounded-2xl shadow-xl p-8\">\n            <p className=\"text-lg text-text-secondary mb-8 leading-relaxed\">\n              {about.bio}\n            </p>\n            <div className=\"grid md:grid-cols-3 gap-6\">\n              {about.email && (\n                <div className=\"flex items-center gap-3\">\n                  <Mail className=\"w-5 h-5 text-primary\" />\n                  <div>\n                    <p className=\"text-sm text-text-muted\">Email</p>\n                    <a href={`mailto:${about.email}`} className=\"text-text-primary hover:text-primary transition-colors\">\n                      {about.email}\n                    </a>\n                  </div>\n                </div>\n              )}\n              {about.phone && (\n                <div className=\"flex items-center gap-3\">\n                  <Phone className=\"w-5 h-5 text-primary\" />\n                  <div>\n                    <p className=\"text-sm text-text-muted\">Phone</p>\n                    <a href={`tel:${about.phone}`} className=\"text-text-primary hover:text-primary transition-colors\">\n                      {about.phone}\n                    </a>\n                  </div>\n                </div>\n              )}\n              {about.location && (\n                <div className=\"flex items-center gap-3\">\n                  <MapPin className=\"w-5 h-5 text-primary\" />\n                  <div>\n                    <p className=\"text-sm text-text-muted\">Location</p>\n                    <p className=\"text-text-primary\">{about.location}</p>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}"
        },
        "src/app/components/Skills.tsx": { 
         "code": "import { getSkills } from '../utils/data';\n\nexport default async function Skills() {\n  let skills;\n  let error = null;\n\n  try {\n    skills = await getSkills();\n  } catch (e) {\n    error = e instanceof Error ? e.message : 'Failed to load skills';\n  }\n\n  if (error) {\n    return (\n      <section id=\"skills\" className=\"py-20 bg-background\">\n        <div className=\"container mx-auto px-4\">\n          <h2 className=\"text-4xl font-bold text-center text-text-primary mb-12\">Skills</h2>\n          <p className=\"text-center text-error\">Unable to load skills</p>\n        </div>\n      </section>\n    );\n  }\n\n  if (!skills || skills.length === 0) {\n    return null;\n  }\n\n  return (\n    <section id=\"skills\" className=\"py-20 bg-background\">\n      <div className=\"container mx-auto px-4\">\n        <h2 className=\"text-4xl font-bold text-center text-text-primary mb-12\">\n          Technical Skills\n        </h2>\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8 max-w-6xl mx-auto\">\n          {skills.map((category) => (\n            <div key={category.id} className=\"bg-surface rounded-2xl p-6 shadow-lg hover:shadow-xl transition-shadow duration-300\">\n              <h3 className=\"text-xl font-semibold text-primary mb-6\">\n                {category.category}\n              </h3>\n              <div className=\"space-y-4\">\n                {category.skills.map((skill, index) => (\n                  <div key={index}>\n                    <div className=\"flex justify-between mb-2\">\n                      <span className=\"text-text-primary font-medium\">{skill.name}</span>\n                      <span className=\"text-text-muted\">{skill.level}%</span>\n                    </div>\n                    <div className=\"w-full bg-surface-hover rounded-full h-2\">\n                      <div\n                        className=\"bg-gradient-to-r from-primary to-primary-hover h-2 rounded-full transition-all duration-500\"\n                        style={{ width: `${skill.level}%` }}\n                      ></div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}"
        }, 
        "src/app/components/Experience.tsx": {
         "code": "import { getExperience, getEducation } from '../utils/data';\nimport { Briefcase, GraduationCap, Calendar, MapPin } from 'lucide-react';\n\nexport default async function Experience() {\n  let experience;\n  let education;\n  let error = null;\n\n  try {\n    const [exp, edu] = await Promise.all([getExperience(), getEducation()]);\n    experience = exp;\n    education = edu;\n  } catch (e) {\n    error = e instanceof Error ? e.message : 'Failed to load data';\n  }\n\n  if (error) {\n    return (\n      <section id=\"experience\" className=\"py-20 bg-surface\">\n        <div className=\"container mx-auto px-4\">\n          <h2 className=\"text-4xl font-bold text-center text-text-primary mb-12\">Experience & Education</h2>\n          <p className=\"text-center text-error\">Unable to load experience data</p>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section id=\"experience\" className=\"py-20 bg-surface\">\n      <div className=\"container mx-auto px-4\">\n        <h2 className=\"text-4xl font-bold text-center text-text-primary mb-12\">\n          Experience & Education\n        </h2>\n        <div className=\"max-w-6xl mx-auto grid lg:grid-cols-2 gap-12\">\n          <div>\n            <div className=\"flex items-center gap-3 mb-8\">\n              <Briefcase className=\"w-6 h-6 text-primary\" />\n              <h3 className=\"text-2xl font-semibold text-text-primary\">Work Experience</h3>\n            </div>\n            <div className=\"space-y-6\">\n              {experience && experience.length > 0 ? (\n                experience.map((job) => (\n                  <div key={job.id} className=\"bg-background rounded-xl p-6 shadow-lg hover:shadow-xl transition-shadow duration-300\">\n                    <h4 className=\"text-xl font-semibold text-primary mb-2\">{job.position}</h4>\n                    <p className=\"text-lg text-text-primary mb-2\">{job.company}</p>\n                    <div className=\"flex items-center gap-4 text-text-muted mb-3\">\n                      <span className=\"flex items-center gap-1\">\n                        <Calendar className=\"w-4 h-4\" />\n                        {job.startDate} - {job.endDate}\n                      </span>\n                      {job.location && (\n                        <span className=\"flex items-center gap-1\">\n                          <MapPin className=\"w-4 h-4\" />\n                          {job.location}\n                        </span>\n                      )}\n                    </div>\n                    <p className=\"text-text-secondary mb-3\">{job.description}</p>\n                    {job.responsibilities && job.responsibilities.length > 0 && (\n                      <ul className=\"list-disc list-inside text-text-secondary space-y-1\">\n                        {job.responsibilities.map((resp, index) => (\n                          <li key={index}>{resp}</li>\n                        ))}\n                      </ul>\n                    )}\n                  </div>\n                ))\n              ) : (\n                <p className=\"text-text-muted\">No experience data available</p>\n              )}\n            </div>\n          </div>\n\n          <div>\n            <div className=\"flex items-center gap-3 mb-8\">\n              <GraduationCap className=\"w-6 h-6 text-primary\" />\n              <h3 className=\"text-2xl font-semibold text-text-primary\">Education</h3>\n            </div>\n            <div className=\"space-y-6\">\n              {education && education.length > 0 ? (\n                education.map((edu) => (\n                  <div key={edu.id} className=\"bg-background rounded-xl p-6 shadow-lg hover:shadow-xl transition-shadow duration-300\">\n                    <h4 className=\"text-xl font-semibold text-primary mb-2\">{edu.degree}</h4>\n                    <p className=\"text-lg text-text-primary mb-2\">{edu.institution}</p>\n                    <p className=\"text-text-secondary mb-2\">{edu.field}</p>\n                    <div className=\"flex items-center gap-4 text-text-muted mb-3\">\n                      <span className=\"flex items-center gap-1\">\n                        <Calendar className=\"w-4 h-4\" />\n                        {edu.startDate} - {edu.endDate}\n                      </span>\n                      {edu.gpa && (\n                        <span>GPA: {edu.gpa}</span>\n                      )}\n                    </div>\n                    {edu.achievements && edu.achievements.length > 0 && (\n                      <div className=\"flex flex-wrap gap-2\">\n                        {edu.achievements.map((achievement, index) => (\n                          <span key={index} className=\"px-3 py-1 bg-primary/10 text-primary rounded-full text-sm\">\n                            {achievement}\n                          </span>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                ))\n              ) : (\n                <p className=\"text-text-muted\">No education data available</p>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}"
        },
        "src/app/components/Projects.tsx": {
         "code": "import { getProjects } from '../utils/data';\nimport { ExternalLink, Github, Star } from 'lucide-react';\n\nexport default async function Projects() {\n  let projects;\n  let error = null;\n\n  try {\n    projects = await getProjects();\n  } catch (e) {\n    error = e instanceof Error ? e.message : 'Failed to load projects';\n  }\n\n  if (error) {\n    return (\n      <section id=\"projects\" className=\"py-20 bg-background\">\n        <div className=\"container mx-auto px-4\">\n          <h2 className=\"text-4xl font-bold text-center text-text-primary mb-12\">Projects</h2>\n          <p className=\"text-center text-error\">Unable to load projects</p>\n        </div>\n      </section>\n    );\n  }\n\n  if (!projects || projects.length === 0) {\n    return (\n      <section id=\"projects\" className=\"py-20 bg-background\">\n        <div className=\"container mx-auto px-4\">\n          <h2 className=\"text-4xl font-bold text-center text-text-primary mb-12\">Projects</h2>\n          <p className=\"text-center text-text-muted\">No projects available</p>\n        </div>\n      </section>\n    );\n  }\n\n  const featuredProjects = projects.filter(p => p.featured);\n  const regularProjects = projects.filter(p => !p.featured);\n\n  return (\n    <section id=\"projects\" className=\"py-20 bg-background\">\n      <div className=\"container mx-auto px-4\">\n        <h2 className=\"text-4xl font-bold text-center text-text-primary mb-12\">\n          Featured Projects\n        </h2>\n        \n        {featuredProjects.length > 0 && (\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8 max-w-6xl mx-auto mb-12\">\n            {featuredProjects.map((project) => (\n              <div key={project.id} className=\"group relative bg-surface rounded-2xl overflow-hidden shadow-lg hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-2\">\n                {project.featured && (\n                  <div className=\"absolute top-4 right-4 z-10\">\n                    <Star className=\"w-6 h-6 text-yellow-500 fill-yellow-500\" />\n                  </div>\n                )}\n                {project.imageUrl && (\n                  <div className=\"aspect-video overflow-hidden\">\n                    <img\n                      src={project.imageUrl}\n                      alt={project.title}\n                      className=\"w-full h-full object-cover group-hover:scale-110 transition-transform duration-300\"\n                    />\n                  </div>\n                )}\n                <div className=\"p-6\">\n                  <h3 className=\"text-xl font-semibold text-text-primary mb-3\">\n                    {project.title}\n                  </h3>\n                  <p className=\"text-text-secondary mb-4\">\n                    {project.description}\n                  </p>\n                  <div className=\"flex flex-wrap gap-2 mb-4\">\n                    {project.technologies.map((tech, index) => (\n                      <span key={index} className=\"px-3 py-1 bg-primary/10 text-primary rounded-full text-sm\">\n                        {tech}\n                      </span>\n                    ))}\n                  </div>\n                  <div className=\"flex gap-4\">\n                    {project.liveUrl && (\n                      <a\n                        href={project.liveUrl}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        className=\"flex items-center gap-2 text-primary hover:text-primary-hover transition-colors\"\n                      >\n                        <ExternalLink className=\"w-5 h-5\" />\n                        Live Demo\n                      </a>\n                    )}\n                    {project.githubUrl && (\n                      <a\n                        href={project.githubUrl}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        className=\"flex items-center gap-2 text-text-secondary hover:text-text-primary transition-colors\"\n                      >\n                        <Github className=\"w-5 h-5\" />\n                        Code\n                      </a>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n\n        {regularProjects.length > 0 && (\n          <>\n            <h3 className=\"text-2xl font-semibold text-center text-text-primary mb-8\">\n              Other Projects\n            </h3>\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8 max-w-6xl mx-auto\">\n              {regularProjects.map((project) => (\n                <div key={project.id} className=\"group relative bg-surface rounded-2xl overflow-hidden shadow-lg hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-2\">\n                  {project.imageUrl && (\n                    <div className=\"aspect-video overflow-hidden\">\n                      <img\n                        src={project.imageUrl}\n                        alt={project.title}\n                        className=\"w-full h-full object-cover group-hover:scale-110 transition-transform duration-300\"\n                      />\n                    </div>\n                  )}\n                  <div className=\"p-6\">\n                    <h3 className=\"text-xl font-semibold text-text-primary mb-3\">\n                      {project.title}\n                    </h3>\n                    <p className=\"text-text-secondary mb-4\">\n                      {project.description}\n                    </p>\n                    <div className=\"flex flex-wrap gap-2 mb-4\">\n                      {project.technologies.map((tech, index) => (\n                        <span key={index} className=\"px-3 py-1 bg-primary/10 text-primary rounded-full text-sm\">\n                          {tech}\n                        </span>\n                      ))}\n                    </div>\n                    <div className=\"flex gap-4\">\n                      {project.liveUrl && (\n                        <a\n                          href={project.liveUrl}\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          className=\"flex items-center gap-2 text-primary hover:text-primary-hover transition-colors\"\n                        >\n                          <ExternalLink className=\"w-5 h-5\" />\n                          Live Demo\n                        </a>\n                      )}\n                      {project.githubUrl && (\n                        <a\n                          href={project.githubUrl}\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                          className=\"flex items-center gap-2 text-text-secondary hover:text-text-primary transition-colors\"\n                        >\n                          <Github className=\"w-5 h-5\" />\n                          Code\n                        </a>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n    </section>\n  );\n}"
        },
        "src/app/components/Services.tsx": { 
         "code": "import { getServices } from '../utils/data';\nimport { Code, Smartphone, Palette, Database, Cloud, Shield } from 'lucide-react';\n\nconst iconMap: { [key: string]: any } = {\n  code: Code,\n  mobile: Smartphone,\n  design: Palette,\n  database: Database,\n  cloud: Cloud,\n  security: Shield,\n};\n\nexport default async function Services() {\n  let services;\n  let error = null;\n\n  try {\n    services = await getServices();\n  } catch (e) {\n    error = e instanceof Error ? e.message : 'Failed to load services';\n  }\n\n  if (error) {\n    return (\n      <section id=\"services\" className=\"py-20 bg-surface\">\n        <div className=\"container mx-auto px-4\">\n          <h2 className=\"text-4xl font-bold text-center text-text-primary mb-12\">Services</h2>\n          <p className=\"text-center text-error\">Unable to load services</p>\n        </div>\n      </section>\n    );\n  }\n\n  if (!services || services.length === 0) {\n    return null;\n  }\n\n  return (\n    <section id=\"services\" className=\"py-20 bg-surface\">\n      <div className=\"container mx-auto px-4\">\n        <h2 className=\"text-4xl font-bold text-center text-text-primary mb-12\">\n          Services I Offer\n        </h2>\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8 max-w-6xl mx-auto\">\n          {services.map((service) => {\n            const Icon = iconMap[service.icon] || Code;\n            return (\n              <div key={service.id} className=\"bg-background rounded-2xl p-8 shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-2\">\n                <div className=\"w-16 h-16 bg-primary/10 rounded-2xl flex items-center justify-center mb-6\">\n                  <Icon className=\"w-8 h-8 text-primary\" />\n                </div>\n                <h3 className=\"text-2xl font-semibold text-text-primary mb-4\">\n                  {service.title}\n                </h3>\n                <p className=\"text-text-secondary mb-6\">\n                  {service.description}\n                </p>\n                {service.features && service.features.length > 0 && (\n                  <ul className=\"space-y-2\">\n                    {service.features.map((feature, index) => (\n                      <li key={index} className=\"flex items-start gap-2\">\n                        <span className=\"text-primary mt-1\">•</span>\n                        <span className=\"text-text-secondary\">{feature}</span>\n                      </li>\n                    ))}\n                  </ul>\n                )}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </section>\n  );\n}"
        }, 
        "src/app/components/Testimonials.tsx": { 
         "code": "import { getTestimonials } from '../utils/data';\nimport { Star, Quote } from 'lucide-react';\n\nexport default async function Testimonials() {\n  let testimonials;\n  let error = null;\n\n  try {\n    testimonials = await getTestimonials();\n  } catch (e) {\n    error = e instanceof Error ? e.message : 'Failed to load testimonials';\n  }\n\n  if (error) {\n    return (\n      <section id=\"testimonials\" className=\"py-20 bg-background\">\n        <div className=\"container mx-auto px-4\">\n          <h2 className=\"text-4xl font-bold text-center text-text-primary mb-12\">Testimonials</h2>\n          <p className=\"text-center text-error\">Unable to load testimonials</p>\n        </div>\n      </section>\n    );\n  }\n\n  if (!testimonials || testimonials.length === 0) {\n    return null;\n  }\n\n  return (\n    <section id=\"testimonials\" className=\"py-20 bg-background\">\n      <div className=\"container mx-auto px-4\">\n        <h2 className=\"text-4xl font-bold text-center text-text-primary mb-12\">\n          What Clients Say\n        </h2>\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8 max-w-6xl mx-auto\">\n          {testimonials.map((testimonial) => (\n            <div key={testimonial.id} className=\"bg-surface rounded-2xl p-8 shadow-lg hover:shadow-xl transition-shadow duration-300 relative\">\n              <Quote className=\"absolute top-4 right-4 w-8 h-8 text-primary/20\" />\n              <div className=\"flex items-center gap-4 mb-6\">\n                {testimonial.avatar && (\n                  <img\n                    src={testimonial.avatar}\n                    alt={testimonial.name}\n                    className=\"w-16 h-16 rounded-full object-cover\"\n                  />\n                )}\n                <div>\n                  <h4 className=\"text-lg font-semibold text-text-primary\">\n                    {testimonial.name}\n                  </h4>\n                  <p className=\"text-text-muted\">\n                    {testimonial.position} {testimonial.company && `at ${testimonial.company}`}\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex gap-1 mb-4\">\n                {[...Array(5)].map((_, i) => (\n                  <Star\n                    key={i}\n                    className={`w-5 h-5 ${\n                      i < testimonial.rating\n                        ? 'text-yellow-500 fill-yellow-500'\n                        : 'text-gray-300'\n                    }`}\n                  />\n                ))}\n              </div>\n              <p className=\"text-text-secondary italic\">\n                \"{testimonial.testimonial}\"\n              </p>\n              {testimonial.date && (\n                <p className=\"text-text-muted text-sm mt-4\">\n                  {new Date(testimonial.date).toLocaleDateString('en-US', {\n                    year: 'numeric',\n                    month: 'long',\n                  })}\n                </p>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}"
        },
        "src/app/components/Contact.tsx": {
         "code": "'use client';\n\nimport { useState } from 'react';\nimport { postContact } from '../utils/data';\nimport { Send, CheckCircle, AlertCircle } from 'lucide-react';\n\nexport default function Contact() {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    subject: '',\n    message: '',\n  });\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [submitStatus, setSubmitStatus] = useState<'idle' | 'success' | 'error'>('idle');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      [e.target.name]: e.target.value,\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n    setSubmitStatus('idle');\n    setErrorMessage('');\n\n    try {\n      const result = await postContact(formData);\n      if (result.success) {\n        setSubmitStatus('success');\n        setFormData({ name: '', email: '', subject: '', message: '' });\n        setTimeout(() => setSubmitStatus('idle'), 5000);\n      } else {\n        setSubmitStatus('error');\n        setErrorMessage('Failed to send message. Please try again.');\n      }\n    } catch (error) {\n      setSubmitStatus('error');\n      setErrorMessage(error instanceof Error ? error.message : 'An error occurred');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <section id=\"contact\" className=\"py-20 bg-surface\">\n      <div className=\"container mx-auto px-4\">\n        <h2 className=\"text-4xl font-bold text-center text-text-primary mb-12\">\n          Get In Touch\n        </h2>\n        <div className=\"max-w-2xl mx-auto\">\n          <form onSubmit={handleSubmit} className=\"bg-background rounded-2xl shadow-xl p-8\">\n            <div className=\"grid md:grid-cols-2 gap-6 mb-6\">\n              <div>\n                <label htmlFor=\"name\" className=\"block text-text-primary font-medium mb-2\">\n                  Name\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"name\"\n                  name=\"name\"\n                  value={formData.name}\n                  onChange={handleChange}\n                  required\n                  className=\"w-full px-4 py-3 bg-surface border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-200\"\n                  placeholder=\"Your Name\"\n                />\n              </div>\n              <div>\n                <label htmlFor=\"email\" className=\"block text-text-primary font-medium mb-2\">\n                  Email\n                </label>\n                <input\n                  type=\"email\"\n                  id=\"email\"\n                  name=\"email\"\n                  value={formData.email}\n                  onChange={handleChange}\n                  required\n                  className=\"w-full px-4 py-3 bg-surface border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-200\"\n                  placeholder=\"your@email.com\"\n                />\n              </div>\n            </div>\n            <div className=\"mb-6\">\n              <label htmlFor=\"subject\" className=\"block text-text-primary font-medium mb-2\">\n                Subject\n              </label>\n              <input\n                type=\"text\"\n                id=\"subject\"\n                name=\"subject\"\n                value={formData.subject}\n                onChange={handleChange}\n                required\n                className=\"w-full px-4 py-3 bg-surface border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-200\"\n                placeholder=\"Project Inquiry\"\n              />\n            </div>\n            <div className=\"mb-6\">\n              <label htmlFor=\"message\" className=\"block text-text-primary font-medium mb-2\">\n                Message\n              </label>\n              <textarea\n                id=\"message\"\n                name=\"message\"\n                value={formData.message}\n                onChange={handleChange}\n                required\n                rows={6}\n                className=\"w-full px-4 py-3 bg-surface border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-200 resize-none\"\n                placeholder=\"Tell me about your project...\"\n              />\n            </div>\n\n            {submitStatus === 'success' && (\n              <div className=\"mb-6 p-4 bg-green-50 border border-green-200 rounded-lg flex items-center gap-3\">\n                <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                <p className=\"text-green-800\">Message sent successfully! I'll get back to you soon.</p>\n              </div>\n            )}\n\n            {submitStatus === 'error' && (\n              <div className=\"mb-6 p-4 bg-red-50 border border-red-200 rounded-lg flex items-center gap-3\">\n                <AlertCircle className=\"w-5 h-5 text-red-600\" />\n                <p className=\"text-red-800\">{errorMessage}</p>\n              </div>\n            )}\n\n            <button\n              type=\"submit\"\n              disabled={isSubmitting}\n              className=\"w-full px-8 py-4 bg-primary hover:bg-primary-hover text-white font-semibold rounded-lg transition-all duration-200 transform hover:scale-[1.02] disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2\"\n            >\n              {isSubmitting ? (\n                <>\n                  <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                  Sending...\n                </>\n              ) : (\n                <>\n                  <Send className=\"w-5 h-5\" />\n                  Send Message\n                </>\n              )}\n            </button>\n          </form>\n        </div>\n      </div>\n    </section>\n  );\n}"
        },
        "src/app/components/Footer.tsx": {
         "code": "import { getAbout } from '../utils/data';\nimport { Github, Linkedin, Twitter, Heart } from 'lucide-react';\n\nexport default async function Footer() {\n  let about;\n  try {\n    about = await getAbout();\n  } catch (e) {\n    about = null;\n  }\n\n  const currentYear = new Date().getFullYear();\n\n  return (\n    <footer className=\"bg-surface-dark py-12\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"flex flex-col items-center\">\n          <div className=\"flex space-x-6 mb-6\">\n            {about?.social?.github && (\n              <a\n                href={about.social.github}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-text-muted hover:text-primary transition-colors duration-200\"\n              >\n                <Github className=\"w-6 h-6\" />\n              </a>\n            )}\n            {about?.social?.linkedin && (\n              <a\n                href={about.social.linkedin}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-text-muted hover:text-primary transition-colors duration-200\"\n              >\n                <Linkedin className=\"w-6 h-6\" />\n              </a>\n            )}\n            {about?.social?.twitter && (\n              <a\n                href={about.social.twitter}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-text-muted hover:text-primary transition-colors duration-200\"\n              >\n                <Twitter className=\"w-6 h-6\" />\n              </a>\n            )}\n          </div>\n          <p className=\"text-text-muted text-center flex items-center gap-2\">\n            © {currentYear} {about?.name || 'Portfolio'}. Made with\n            <Heart className=\"w-4 h-4 text-red-500 fill-red-500\" />\n            using Next.js & Tailwind CSS\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n}"
        },
        "src/app/utils/data.ts": {
         "code": "const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001';\n\nexport interface About {\n  name: string;\n  title: string;\n  bio: string;\n  email: string;\n  phone: string;\n  location: string;\n  avatar: string;\n  resume: string;\n  social: {\n    github: string;\n    linkedin: string;\n    twitter: string;\n  };\n}\n\nexport interface Project {\n  id: number;\n  title: string;\n  description: string;\n  technologies: string[];\n  imageUrl: string;\n  liveUrl: string;\n  githubUrl: string;\n  featured: boolean;\n}\n\nexport interface SkillCategory {\n  id: number;\n  category: string;\n  skills: {\n    name: string;\n    level: number;\n  }[];\n}\n\nexport interface Experience {\n  id: number;\n  company: string;\n  position: string;\n  startDate: string;\n  endDate: string;\n  description: string;\n  responsibilities: string[];\n  location: string;\n}\n\nexport interface Education {\n  id: number;\n  institution: string;\n  degree: string;\n  field: string;\n  startDate: string;\n  endDate: string;\n  gpa: string;\n  achievements: string[];\n}\n\nexport interface Service {\n  id: number;\n  title: string;\n  description: string;\n  icon: string;\n  features: string[];\n}\n\nexport interface Testimonial {\n  id: number;\n  name: string;\n  position: string;\n  company: string;\n  testimonial: string;\n  rating: number;\n  avatar: string;\n  date: string;\n}\n\nexport interface ContactResult {\n  success: boolean;\n  message: string;\n  data?: {\n    id: string;\n    timestamp: string;\n  };\n}\n\nexport async function getAbout(): Promise<About> {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/portfolio/about`, {\n      next: { revalidate: 60 },\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch about data: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    throw new Error(`Error fetching about data: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\nexport async function getProjects(): Promise<Project[]> {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/portfolio/projects`, {\n      next: { revalidate: 60 },\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch projects: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    throw new Error(`Error fetching projects: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\nexport async function getProject(id: number): Promise<Project> {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/portfolio/projects/${id}`, {\n      next: { revalidate: 60 },\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch project: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    throw new Error(`Error fetching project: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\nexport async function getSkills(): Promise<SkillCategory[]> {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/skills`, {\n      next: { revalidate: 60 },\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch skills: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    throw new Error(`Error fetching skills: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\nexport async function getExperience(): Promise<Experience[]> {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/experience`, {\n      next: { revalidate: 60 },\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch experience: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    throw new Error(`Error fetching experience: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\nexport async function getEducation(): Promise<Education[]> {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/education`, {\n      next: { revalidate: 60 },\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch education: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    throw new Error(`Error fetching education: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\nexport async function getServices(): Promise<Service[]> {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/portfolio/services`, {\n      next: { revalidate: 60 },\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch services: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    throw new Error(`Error fetching services: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\nexport async function getTestimonials(): Promise<Testimonial[]> {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/portfolio/testimonials`, {\n      next: { revalidate: 60 },\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to fetch testimonials: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    throw new Error(`Error fetching testimonials: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}\n\nexport async function postContact(input: {\n  name: string;\n  email: string;\n  subject: string;\n  message: string;\n}): Promise<ContactResult> {\n  try {\n    const response = await fetch(`${API_BASE_URL}/api/contact`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(input),\n    });\n    if (!response.ok) {\n      throw new Error(`Failed to send message: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    throw new Error(`Error sending message: ${error instanceof Error ? error.message : 'Unknown error'}`);\n  }\n}"
        },
        "src/app/globals.css": {
         "code": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  :root {\n    --background: 0 0% 100%;\n    --foreground: 222.2 84% 4.9%;\n  }\n\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n  }\n}\n\n@layer utilities {\n  .bg-grid-pattern {\n    background-image: linear-gradient(to right, rgba(0, 0, 0, 0.1) 1px, transparent 1px),\n      linear-gradient(to bottom, rgba(0, 0, 0, 0.1) 1px, transparent 1px);\n    background-size: 20px 20px;\n  }\n}\n\n@layer components {\n  .animate-float {\n    animation: float 6s ease-in-out infinite;\n  }\n\n  @keyframes float {\n    0%, 100% {\n      transform: translateY(0px);\n    }\n    50% {\n      transform: translateY(-20px);\n    }\n  }\n}"
        },
        "tailwind.config.js": {
         "code": "/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/components/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/app/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n  theme: {\n    extend: {\n      colors: {\n        primary: {\n          DEFAULT: '#6366f1',\n          hover: '#5558e3',\n          light: '#818cf8',\n          dark: '#4f46e5',\n        },\n        background: '#ffffff',\n        surface: {\n          DEFAULT: '#f8fafc',\n          hover: '#f1f5f9',\n          dark: '#1e293b',\n        },\n        text: {\n          primary: '#0f172a',\n          secondary: '#475569',\n          muted: '#94a3b8',\n        },\n        border: '#e2e8f0',\n        error: '#ef4444',\n        success: '#10b981',\n        warning: '#f59e0b',\n      },\n      animation: {\n        'spin-slow': 'spin 3s linear infinite',\n      },\n    },\n  },\n  plugins: [],\n}"
        },
        "next.config.ts": {
         "code": "import type { NextConfig } from 'next';\n\nconst nextConfig: NextConfig = {\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 'example.com',\n      },\n      {\n        protocol: 'https',\n        hostname: 'images.unsplash.com',\n      },\n      {\n        protocol: 'https',\n        hostname: 'github.com',\n      },\n      {\n        protocol: 'https',\n        hostname: '*.githubusercontent.com',\n      },\n    ],\n  },\n  env: {\n    NEXT_PUBLIC_API_URL: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001',\n  },\n};\n\nexport default nextConfig;"
        },
        ".env.local": { 
         "code":   "NEXT_PUBLIC_API_URL=http://localhost:3001"
        }
      },
      "libraries": [
        "lucide-react@latest"
      ]
    }
  }
}