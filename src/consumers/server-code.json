{
  "status": "finished",
  "code": {
    "server": {
      "fileStructure": {
        ".env": {
          "code": "PORT=3001\nNODE_ENV=development\nEMAIL_HOST=smtp.gmail.com\nEMAIL_PORT=587\nEMAIL_USER=your-email@gmail.com\nEMAIL_PASS=your-app-password\nEMAIL_FROM=noreply@portfolio.com\nADMIN_EMAIL=admin@portfolio.com"
        },
        "index.js": {
          "code": "const express = require('express');\nconst dotenv = require('dotenv');\nconst helmet = require('helmet');\nconst morgan = require('morgan');\nconst compression = require('compression');\nconst corsMiddleware = require('./middlewares/cors');\nconst errorHandler = require('./middlewares/errorHandler');\nconst rateLimiter = require('./middlewares/rateLimiter');\nconst logger = require('./utils/logger');\n\ndotenv.config();\n\nconst app = express();\nconst PORT = process.env.PORT || 3001;\n\napp.use(helmet());\napp.use(compression());\napp.use(morgan('combined', { stream: { write: message => logger.info(message.trim()) }}));\napp.use(corsMiddleware);\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\napp.use('/api', rateLimiter);\n\nconst portfolioRoutes = require('./routes/portfolio.routes');\nconst contactRoutes = require('./routes/contact.routes');\nconst skillsRoutes = require('./routes/skills.routes');\nconst experienceRoutes = require('./routes/experience.routes');\nconst educationRoutes = require('./routes/education.routes');\n\napp.use('/api/portfolio', portfolioRoutes);\napp.use('/api/contact', contactRoutes);\napp.use('/api/skills', skillsRoutes);\napp.use('/api/experience', experienceRoutes);\napp.use('/api/education', educationRoutes);\n\napp.get('/health', (req, res) => {\n  res.json({ status: 'OK', timestamp: new Date().toISOString() });\n});\n\napp.use(errorHandler);\n\nif (process.env.NODE_ENV !== 'test') {\n  app.listen(PORT, () => {\n    logger.info(`Server running on port ${PORT}`);\n  });\n}\n\nmodule.exports = app;"
        },
        "package.json": {
          "code": "{\n  \"name\": \"portfolio-backend\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Portfolio website backend API\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"node index.js\",\n    \"dev\": \"nodemon index.js\",\n    \"test\": \"cross-env NODE_ENV=test jest --coverage --detectOpenHandles\",\n    \"test:watch\": \"cross-env NODE_ENV=test jest --watch\"\n  },\n  \"keywords\": [\"portfolio\", \"api\", \"express\"],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"express\": \"^4.18.2\",\n    \"cors\": \"^2.8.5\",\n    \"dotenv\": \"^16.3.1\",\n    \"helmet\": \"^7.1.0\",\n    \"express-rate-limit\": \"^7.1.5\",\n    \"express-validator\": \"^7.0.1\",\n    \"nodemailer\": \"^6.9.7\",\n    \"morgan\": \"^1.10.0\",\n    \"compression\": \"^1.7.4\",\n    \"winston\": \"^3.11.0\",\n    \"body-parser\": \"^1.20.2\"\n  },\n  \"devDependencies\": {\n    \"nodemon\": \"^3.0.2\",\n    \"jest\": \"^29.7.0\",\n    \"supertest\": \"^6.3.3\",\n    \"cross-env\": \"^7.0.3\"\n  },\n  \"jest\": {\n    \"testEnvironment\": \"node\",\n    \"coveragePathIgnorePatterns\": [\"/node_modules/\"],\n    \"testTimeout\": 10000\n  }\n}"
        },
        "data/mockData.js": {
          "code": "const mockData = {\n  about: {\n    name: 'John Doe',\n    title: 'Full Stack Developer',\n    bio: 'Passionate developer with 5 years of experience building scalable web applications and leading development teams. Specialized in React, Node.js, and cloud technologies.',\n    email: 'john@example.com',\n    phone: '+1234567890',\n    location: 'San Francisco, CA',\n    avatar: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400',\n    resume: 'https://example.com/resume.pdf',\n    social: {\n      github: 'https://github.com/johndoe',\n      linkedin: 'https://linkedin.com/in/johndoe',\n      twitter: 'https://twitter.com/johndoe'\n    }\n  },\n  projects: [\n    {\n      id: 1,\n      title: 'E-commerce Platform',\n      description: 'Full-stack web application with payment integration and inventory management',\n      technologies: ['React', 'Node.js', 'MongoDB', 'Stripe'],\n      imageUrl: 'https://images.unsplash.com/photo-1556742049-0cfed4f6a45d?w=800',\n      liveUrl: 'https://project1.com',\n      githubUrl: 'https://github.com/user/project1',\n      featured: true\n    },\n    {\n      id: 2,\n      title: 'Task Management System',\n      description: 'Collaborative project management tool with real-time updates',\n      technologies: ['Vue.js', 'Express', 'PostgreSQL', 'Socket.io'],\n      imageUrl: 'https://images.unsplash.com/photo-1611224923853-80b023f02d71?w=800',\n      liveUrl: 'https://project2.com',\n      githubUrl: 'https://github.com/user/project2',\n      featured: true\n    },\n    {\n      id: 3,\n      title: 'Weather Dashboard',\n      description: 'Real-time weather monitoring application with forecasting',\n      technologies: ['React', 'TypeScript', 'Weather API', 'Chart.js'],\n      imageUrl: 'https://images.unsplash.com/photo-1504608524841-42fe6f032b4b?w=800',\n      liveUrl: 'https://project3.com',\n      githubUrl: 'https://github.com/user/project3',\n      featured: false\n    }\n  ],\n  services: [\n    {\n      id: 1,\n      title: 'Web Development',\n      description: 'Custom web applications using modern technologies',\n      icon: 'code',\n      features: ['Responsive Design', 'SEO Optimization', 'Performance Tuning', 'Progressive Web Apps']\n    },\n    {\n      id: 2,\n      title: 'Mobile Development',\n      description: 'Native and hybrid mobile applications',\n      icon: 'mobile',\n      features: ['iOS Development', 'Android Development', 'React Native', 'Flutter']\n    },\n    {\n      id: 3,\n      title: 'Backend Development',\n      description: 'Scalable server-side solutions and APIs',\n      icon: 'server',\n      features: ['RESTful APIs', 'GraphQL', 'Microservices', 'Database Design']\n    }\n  ],\n  testimonials: [\n    {\n      id: 1,\n      name: 'Sarah Johnson',\n      position: 'CEO at StartupX',\n      company: 'StartupX',\n      testimonial: 'Excellent developer with great attention to detail. Delivered our project on time and exceeded expectations.',\n      rating: 5,\n      avatar: 'https://images.unsplash.com/photo-1494790108377-be9c29b29330?w=400',\n      date: '2023-12-01'\n    },\n    {\n      id: 2,\n      name: 'Michael Chen',\n      position: 'CTO at TechCorp',\n      company: 'TechCorp',\n      testimonial: 'Outstanding technical skills and problem-solving abilities. A true professional.',\n      rating: 5,\n      avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=400',\n      date: '2023-11-15'\n    }\n  ],\n  skills: [\n    {\n      id: 1,\n      category: 'Frontend',\n      skills: [\n        { name: 'React', level: 90 },\n        { name: 'Vue.js', level: 75 },\n        { name: 'TypeScript', level: 85 },\n        { name: 'HTML/CSS', level: 95 },\n        { name: 'JavaScript', level: 92 }\n      ]\n    },\n    {\n      id: 2,\n      category: 'Backend',\n      skills: [\n        { name: 'Node.js', level: 88 },\n        { name: 'Express', level: 90 },\n        { name: 'MongoDB', level: 80 },\n        { name: 'PostgreSQL', level: 75 },\n        { name: 'Python', level: 70 }\n      ]\n    },\n    {\n      id: 3,\n      category: 'DevOps',\n      skills: [\n        { name: 'Docker', level: 78 },\n        { name: 'AWS', level: 72 },\n        { name: 'CI/CD', level: 80 },\n        { name: 'Git', level: 90 }\n      ]\n    }\n  ],\n  experience: [\n    {\n      id: 1,\n      company: 'Tech Corp',\n      position: 'Senior Developer',\n      startDate: '2020-01',\n      endDate: 'present',\n      description: 'Leading development of web applications and mentoring junior developers',\n      responsibilities: ['Code review', 'Architecture design', 'Team mentoring', 'Sprint planning'],\n      location: 'Remote'\n    },\n    {\n      id: 2,\n      company: 'Digital Agency',\n      position: 'Full Stack Developer',\n      startDate: '2018-06',\n      endDate: '2019-12',\n      description: 'Developed client websites and web applications',\n      responsibilities: ['Frontend development', 'Backend APIs', 'Database design', 'Client communication'],\n      location: 'New York, NY'\n    }\n  ],\n  education: [\n    {\n      id: 1,\n      institution: 'University of Technology',\n      degree: 'Bachelor of Science',\n      field: 'Computer Science',\n      startDate: '2015-09',\n      endDate: '2019-06',\n      gpa: '3.8',\n      achievements: ['Dean\\'s List', 'Best Project Award', 'Academic Excellence']\n    },\n    {\n      id: 2,\n      institution: 'Online Academy',\n      degree: 'Certificate',\n      field: 'Cloud Computing',\n      startDate: '2020-01',\n      endDate: '2020-06',\n      gpa: '4.0',\n      achievements: ['AWS Certified Solutions Architect']\n    }\n  ],\n  messages: [\n    {\n      id: 1,\n      name: 'Jane Smith',\n      email: 'jane@example.com',\n      subject: 'Project Inquiry',\n      message: 'I would like to discuss a project opportunity with you.',\n      timestamp: '2024-01-15T10:30:00Z',\n      read: false\n    }\n  ]\n};\n\nmodule.exports = mockData;"
        },
        "controllers/portfolio.controller.js": {
          "code": "const mockData = require('../data/mockData');\n\nconst getAbout = (req, res) => {\n  try {\n    res.json(mockData.about);\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to fetch about data' });\n  }\n};\n\nconst getProjects = (req, res) => {\n  try {\n    res.json(mockData.projects);\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to fetch projects' });\n  }\n};\n\nconst getProjectById = (req, res) => {\n  try {\n    const projectId = parseInt(req.params.id);\n    const project = mockData.projects.find(p => p.id === projectId);\n    \n    if (!project) {\n      return res.status(404).json({ error: 'Project not found' });\n    }\n    \n    res.json(project);\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to fetch project' });\n  }\n};\n\nconst getServices = (req, res) => {\n  try {\n    res.json(mockData.services);\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to fetch services' });\n  }\n};\n\nconst getTestimonials = (req, res) => {\n  try {\n    res.json(mockData.testimonials);\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to fetch testimonials' });\n  }\n};\n\nmodule.exports = {\n  getAbout,\n  getProjects,\n  getProjectById,\n  getServices,\n  getTestimonials\n};"
        },
        "controllers/contact.controller.js": {
          "code": "const mockData = require('../data/mockData');\nconst emailService = require('../utils/emailService');\nconst logger = require('../utils/logger');\n\nconst sendMessage = async (req, res) => {\n  try {\n    const { name, email, subject, message } = req.body;\n    \n    const messageId = `msg_${Date.now()}`;\n    const timestamp = new Date().toISOString();\n    \n    const newMessage = {\n      id: mockData.messages.length + 1,\n      name,\n      email,\n      subject,\n      message,\n      timestamp,\n      read: false\n    };\n    \n    mockData.messages.push(newMessage);\n    \n    try {\n      await emailService.sendContactEmail({\n        name,\n        email,\n        subject,\n        message\n      });\n    } catch (emailError) {\n      logger.error('Email sending failed:', emailError);\n    }\n    \n    res.status(201).json({\n      success: true,\n      message: 'Message sent successfully',\n      data: {\n        id: messageId,\n        timestamp\n      }\n    });\n  } catch (error) {\n    logger.error('Contact message error:', error);\n    res.status(500).json({ \n      success: false, \n      error: 'Failed to send message' \n    });\n  }\n};\n\nconst getMessages = (req, res) => {\n  try {\n    res.json(mockData.messages);\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to fetch messages' });\n  }\n};\n\nmodule.exports = {\n  sendMessage,\n  getMessages\n};"
        },
        "controllers/skills.controller.js": {
          "code": "const mockData = require('../data/mockData');\n\nconst getSkills = (req, res) => {\n  try {\n    res.json(mockData.skills);\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to fetch skills' });\n  }\n};\n\nmodule.exports = {\n  getSkills\n};"
        },
        "controllers/experience.controller.js": {
          "code": "const mockData = require('../data/mockData');\n\nconst getExperience = (req, res) => {\n  try {\n    res.json(mockData.experience);\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to fetch experience' });\n  }\n};\n\nmodule.exports = {\n  getExperience\n};"
        },
        "controllers/education.controller.js": { 
          "code": "const mockData = require('../data/mockData');\n\nconst getEducation = (req, res) => {\n  try {\n    res.json(mockData.education);\n  } catch (error) {\n    res.status(500).json({ error: 'Failed to fetch education' });\n  }\n};\n\nmodule.exports = {\n  getEducation\n};"
        },
        "routes/portfolio.routes.js": {
          "code": "const express = require('express');\nconst router = express.Router();\nconst portfolioController = require('../controllers/portfolio.controller');\n\nrouter.get('/about', portfolioController.getAbout);\nrouter.get('/projects', portfolioController.getProjects);\nrouter.get('/projects/:id', portfolioController.getProjectById);\nrouter.get('/services', portfolioController.getServices);\nrouter.get('/testimonials', portfolioController.getTestimonials);\n\nmodule.exports = router;"
        },
        "routes/contact.routes.js": {
          "code": "const express = require('express');\nconst router = express.Router();\nconst contactController = require('../controllers/contact.controller');\nconst { validateContact } = require('../middlewares/validation');\n\nrouter.post('/', validateContact, contactController.sendMessage);\nrouter.get('/messages', contactController.getMessages);\n\nmodule.exports = router;"
        },
        "routes/skills.routes.js": {
          "code": "const express = require('express');\nconst router = express.Router();\nconst skillsController = require('../controllers/skills.controller');\n\nrouter.get('/', skillsController.getSkills);\n\nmodule.exports = router;"
        },
        "routes/experience.routes.js": {
          "code": "const express = require('express');\nconst router = express.Router();\nconst experienceController = require('../controllers/experience.controller');\n\nrouter.get('/', experienceController.getExperience);\n\nmodule.exports = router;"
        },
        "routes/education.routes.js": {
          "code": "const express = require('express');\nconst router = express.Router();\nconst educationController = require('../controllers/education.controller');\n\nrouter.get('/', educationController.getEducation);\n\nmodule.exports = router;"
        },
        "middlewares/cors.js": {
          "code": "const cors = require('cors');\n\nconst corsOptions = {\n  origin: function (origin, callback) {\n    const allowedOrigins = [\n      'http://localhost:3000',\n      'http://localhost:3001',\n      'https://yourdomain.com'\n    ];\n    \n    if (!origin || allowedOrigins.indexOf(origin) !== -1) {\n      callback(null, true);\n    } else {\n      callback(new Error('Not allowed by CORS'));\n    }\n  },\n  credentials: true,\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n  allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],\n  exposedHeaders: ['X-Total-Count'],\n  maxAge: 86400\n};\n\nmodule.exports = cors(corsOptions);"
        },
        "middlewares/errorHandler.js": {
          "code": "const logger = require('../utils/logger');\n\nconst errorHandler = (err, req, res, next) => {\n  logger.error({\n    message: err.message,\n    stack: err.stack,\n    url: req.url,\n    method: req.method,\n    ip: req.ip\n  });\n\n  if (err.name === 'ValidationError') {\n    return res.status(400).json({\n      error: 'Validation Error',\n      details: err.message\n    });\n  }\n\n  if (err.name === 'UnauthorizedError') {\n    return res.status(401).json({\n      error: 'Unauthorized',\n      message: 'Invalid authentication credentials'\n    });\n  }\n\n  if (err.name === 'CastError') {\n    return res.status(400).json({\n      error: 'Invalid ID format'\n    });\n  }\n\n  const statusCode = err.statusCode || 500;\n  const message = err.message || 'Internal Server Error';\n\n  res.status(statusCode).json({\n    error: message,\n    ...(process.env.NODE_ENV === 'development' && { stack: err.stack })\n  });\n};\n\nmodule.exports = errorHandler;"
        },
        "middlewares/rateLimiter.js": {
          "code": "const rateLimit = require('express-rate-limit');\n\nconst createRateLimiter = (windowMs = 15 * 60 * 1000, max = 100) => {\n  return rateLimit({\n    windowMs,\n    max,\n    message: 'Too many requests from this IP, please try again later.',\n    standardHeaders: true,\n    legacyHeaders: false,\n    handler: (req, res) => {\n      res.status(429).json({\n        error: 'Too Many Requests',\n        message: 'Rate limit exceeded. Please try again later.',\n        retryAfter: Math.ceil(windowMs / 1000)\n      });\n    }\n  });\n};\n\nconst apiLimiter = createRateLimiter(15 * 60 * 1000, 100);\n\nconst contactLimiter = createRateLimiter(60 * 60 * 1000, 5);\n\nmodule.exports = apiLimiter;\nmodule.exports.contactLimiter = contactLimiter;"
        },  
        "middlewares/validation.js": {
          "code": "const { body, validationResult } = require('express-validator');\n\nconst handleValidationErrors = (req, res, next) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: 'Validation failed',\n      details: errors.array()\n    });\n  }\n  next();\n};\n\nconst validateContact = [\n  body('name')\n    .trim()\n    .notEmpty().withMessage('Name is required')\n    .isLength({ min: 2, max: 100 }).withMessage('Name must be between 2 and 100 characters'),\n  body('email')\n    .trim()\n    .notEmpty().withMessage('Email is required')\n    .isEmail().withMessage('Please provide a valid email')\n    .normalizeEmail(),\n  body('subject')\n    .trim()\n    .notEmpty().withMessage('Subject is required')\n    .isLength({ min: 3, max: 200 }).withMessage('Subject must be between 3 and 200 characters'),\n  body('message')\n    .trim()\n    .notEmpty().withMessage('Message is required')\n    .isLength({ min: 10, max: 1000 }).withMessage('Message must be between 10 and 1000 characters'),\n  handleValidationErrors\n];\n\nmodule.exports = {\n  validateContact\n};"
        },
        "utils/emailService.js": {
          "code": "const nodemailer = require('nodemailer');\nconst logger = require('./logger');\n\nconst createTransporter = () => {\n  if (process.env.NODE_ENV === 'test') {\n    return {\n      sendMail: async () => ({ messageId: 'test-message-id' })\n    };\n  }\n\n  return nodemailer.createTransporter({\n    host: process.env.EMAIL_HOST || 'smtp.gmail.com',\n    port: parseInt(process.env.EMAIL_PORT) || 587,\n    secure: false,\n    auth: {\n      user: process.env.EMAIL_USER,\n      pass: process.env.EMAIL_PASS\n    }\n  });\n};\n\nconst transporter = createTransporter();\n\nconst sendContactEmail = async ({ name, email, subject, message }) => {\n  try {\n    const mailOptions = {\n      from: process.env.EMAIL_FROM || 'noreply@portfolio.com',\n      to: process.env.ADMIN_EMAIL || 'admin@portfolio.com',\n      subject: `Portfolio Contact: ${subject}`,\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <h2 style=\"color: #333;\">New Contact Message</h2>\n          <div style=\"background: #f5f5f5; padding: 20px; border-radius: 5px;\">\n            <p><strong>Name:</strong> ${name}</p>\n            <p><strong>Email:</strong> ${email}</p>\n            <p><strong>Subject:</strong> ${subject}</p>\n            <div style=\"margin-top: 20px;\">\n              <strong>Message:</strong>\n              <p style=\"white-space: pre-wrap;\">${message}</p>\n            </div>\n          </div>\n          <p style=\"color: #666; font-size: 12px; margin-top: 20px;\">\n            This message was sent from your portfolio contact form.\n          </p>\n        </div>\n      `,\n      text: `New contact from ${name} (${email})\\n\\nSubject: ${subject}\\n\\nMessage:\\n${message}`\n    };\n\n    const info = await transporter.sendMail(mailOptions);\n    logger.info(`Email sent: ${info.messageId}`);\n    return info;\n  } catch (error) {\n    logger.error('Email service error:', error);\n    throw error;\n  }\n};\n\nconst sendAutoReply = async ({ name, email }) => {\n  try {\n    const mailOptions = {\n      from: process.env.EMAIL_FROM || 'noreply@portfolio.com',\n      to: email,\n      subject: 'Thank you for contacting me',\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <h2 style=\"color: #333;\">Thank you for reaching out!</h2>\n          <p>Hi ${name},</p>\n          <p>I've received your message and will get back to you as soon as possible.</p>\n          <p>Best regards,<br>John Doe</p>\n        </div>\n      `,\n      text: `Hi ${name},\\n\\nThank you for reaching out! I've received your message and will get back to you soon.\\n\\nBest regards,\\nJohn Doe`\n    };\n\n    const info = await transporter.sendMail(mailOptions);\n    logger.info(`Auto-reply sent: ${info.messageId}`);\n    return info;\n  } catch (error) {\n    logger.error('Auto-reply error:', error);\n    throw error;\n  }\n};\n\nmodule.exports = {\n  sendContactEmail,\n  sendAutoReply\n};"
        },
        "utils/logger.js": {
          "code": "const winston = require('winston');\nconst path = require('path');\n\nconst logFormat = winston.format.combine(\n  winston.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),\n  winston.format.errors({ stack: true }),\n  winston.format.splat(),\n  winston.format.json()\n);\n\nconst logger = winston.createLogger({\n  level: process.env.LOG_LEVEL || 'info',\n  format: logFormat,\n  defaultMeta: { service: 'portfolio-api' },\n  transports: [\n    new winston.transports.File({\n      filename: path.join('logs', 'error.log'),\n      level: 'error',\n      maxsize: 5242880,\n      maxFiles: 5\n    }),\n    new winston.transports.File({\n      filename: path.join('logs', 'combined.log'),\n      maxsize: 5242880,\n      maxFiles: 5\n    })\n  ]\n});\n\nif (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test') {\n  logger.add(new winston.transports.Console({\n    format: winston.format.combine(\n      winston.format.colorize(),\n      winston.format.simple()\n    )\n  }));\n}\n\nmodule.exports = logger;"
        },
        "types/index.js": { 
          "code": "const ProjectSchema = {\n  id: 'number',\n  title: 'string',\n  description: 'string',\n  technologies: 'array',\n  imageUrl: 'string',\n  liveUrl: 'string',\n  githubUrl: 'string',\n  featured: 'boolean'\n};\n\nconst AboutSchema = {\n  name: 'string',\n  title: 'string',\n  bio: 'string',\n  email: 'string',\n  phone: 'string',\n  location: 'string',\n  avatar: 'string',\n  resume: 'string',\n  social: {\n    github: 'string',\n    linkedin: 'string',\n    twitter: 'string'\n  }\n};\n\nconst SkillSchema = {\n  id: 'number',\n  category: 'string',\n  skills: [{\n    name: 'string',\n    level: 'number'\n  }]\n};\n\nconst ExperienceSchema = {\n  id: 'number',\n  company: 'string',\n  position: 'string',\n  startDate: 'string',\n  endDate: 'string',\n  description: 'string',\n  responsibilities: 'array',\n  location: 'string'\n};\n\nconst EducationSchema = {\n  id: 'number',\n  institution: 'string',\n  degree: 'string',\n  field: 'string',\n  startDate: 'string',\n  endDate: 'string',\n  gpa: 'string',\n  achievements: 'array'\n};\n\nconst ContactSchema = {\n  name: 'string',\n  email: 'string',\n  subject: 'string',\n  message: 'string'\n};\n\nmodule.exports = {\n  ProjectSchema,\n  AboutSchema,\n  SkillSchema,\n  ExperienceSchema,\n  EducationSchema,\n  ContactSchema\n};"
        },
        "tests/portfolio.test.js": {
          "code": "const request = require('supertest');\nconst app = require('../index');\n\ndescribe('Portfolio API Tests', () => {\n  describe('GET /api/portfolio/about', () => {\n    it('should return about information', async () => {\n      const response = await request(app)\n        .get('/api/portfolio/about')\n        .expect(200);\n      \n      expect(response.body).toHaveProperty('name');\n      expect(response.body).toHaveProperty('title');\n      expect(response.body).toHaveProperty('bio');\n      expect(response.body).toHaveProperty('email');\n      expect(response.body).toHaveProperty('social');\n    });\n  });\n\n  describe('GET /api/portfolio/projects', () => {\n    it('should return all projects', async () => {\n      const response = await request(app)\n        .get('/api/portfolio/projects')\n        .expect(200);\n      \n      expect(Array.isArray(response.body)).toBe(true);\n      expect(response.body.length).toBeGreaterThan(0);\n      expect(response.body[0]).toHaveProperty('id');\n      expect(response.body[0]).toHaveProperty('title');\n      expect(response.body[0]).toHaveProperty('technologies');\n    });\n  });\n\n  describe('GET /api/portfolio/projects/:id', () => {\n    it('should return a specific project', async () => {\n      const response = await request(app)\n        .get('/api/portfolio/projects/1')\n        .expect(200);\n      \n      expect(response.body).toHaveProperty('id', 1);\n      expect(response.body).toHaveProperty('title');\n    });\n\n    it('should return 404 for non-existent project', async () => {\n      await request(app)\n        .get('/api/portfolio/projects/999')\n        .expect(404);\n    });\n  });\n\n  describe('GET /api/portfolio/services', () => {\n    it('should return all services', async () => {\n      const response = await request(app)\n        .get('/api/portfolio/services')\n        .expect(200);\n      \n      expect(Array.isArray(response.body)).toBe(true);\n      expect(response.body[0]).toHaveProperty('title');\n      expect(response.body[0]).toHaveProperty('features');\n    });\n  });\n\n  describe('GET /api/portfolio/testimonials', () => {\n    it('should return all testimonials', async () => {\n      const response = await request(app)\n        .get('/api/portfolio/testimonials')\n        .expect(200);\n      \n      expect(Array.isArray(response.body)).toBe(true);\n      expect(response.body[0]).toHaveProperty('name');\n      expect(response.body[0]).toHaveProperty('testimonial');\n      expect(response.body[0]).toHaveProperty('rating');\n    });\n  });\n});"
        },
        "tests/contact.test.js": {
          "code": "const request = require('supertest');\nconst app = require('../index');\n\ndescribe('Contact API Tests', () => {\n  describe('POST /api/contact', () => {\n    it('should send a contact message successfully', async () => {\n      const contactData = {\n        name: 'Test User',\n        email: 'test@example.com',\n        subject: 'Test Subject',\n        message: 'This is a test message for the contact form'\n      };\n\n      const response = await request(app)\n        .post('/api/contact')\n        .send(contactData)\n        .expect(201);\n      \n      expect(response.body).toHaveProperty('success', true);\n      expect(response.body).toHaveProperty('message', 'Message sent successfully');\n      expect(response.body.data).toHaveProperty('id');\n      expect(response.body.data).toHaveProperty('timestamp');\n    });\n\n    it('should fail with missing required fields', async () => {\n      const invalidData = {\n        name: 'Test',\n        email: 'invalid-email'\n      };\n\n      const response = await request(app)\n        .post('/api/contact')\n        .send(invalidData)\n        .expect(400);\n      \n      expect(response.body).toHaveProperty('error');\n    });\n\n    it('should validate email format', async () => {\n      const invalidData = {\n        name: 'Test User',\n        email: 'not-an-email',\n        subject: 'Test Subject',\n        message: 'This is a test message'\n      };\n\n      const response = await request(app)\n        .post('/api/contact')\n        .send(invalidData)\n        .expect(400);\n      \n      expect(response.body).toHaveProperty('error');\n    });\n  });\n\n  describe('GET /api/contact/messages', () => {\n    it('should return all messages', async () => {\n      const response = await request(app)\n        .get('/api/contact/messages')\n        .expect(200);\n      \n      expect(Array.isArray(response.body)).toBe(true);\n    });\n  });\n});"
        },
        "tests/skills.test.js": {
          "code": "const request = require('supertest');\nconst app = require('../index');\n\ndescribe('Skills API Tests', () => {\n  describe('GET /api/skills', () => {\n    it('should return all skills grouped by category', async () => {\n      const response = await request(app)\n        .get('/api/skills')\n        .expect(200);\n      \n      expect(Array.isArray(response.body)).toBe(true);\n      expect(response.body.length).toBeGreaterThan(0);\n      expect(response.body[0]).toHaveProperty('id');\n      expect(response.body[0]).toHaveProperty('category');\n      expect(response.body[0]).toHaveProperty('skills');\n      expect(Array.isArray(response.body[0].skills)).toBe(true);\n    });\n\n    it('should have valid skill structure', async () => {\n      const response = await request(app)\n        .get('/api/skills')\n        .expect(200);\n      \n      const firstCategory = response.body[0];\n      expect(firstCategory.skills[0]).toHaveProperty('name');\n      expect(firstCategory.skills[0]).toHaveProperty('level');\n      expect(typeof firstCategory.skills[0].level).toBe('number');\n      expect(firstCategory.skills[0].level).toBeGreaterThanOrEqual(0);\n      expect(firstCategory.skills[0].level).toBeLessThanOrEqual(100);\n    });\n  });\n});"
        },
        "tests/experience.test.js": {
          "code": "const request = require('supertest');\nconst app = require('../index');\n\ndescribe('Experience API Tests', () => {\n  describe('GET /api/experience', () => {\n    it('should return all work experience', async () => {\n      const response = await request(app)\n        .get('/api/experience')\n        .expect(200);\n      \n      expect(Array.isArray(response.body)).toBe(true);\n      expect(response.body.length).toBeGreaterThan(0);\n      expect(response.body[0]).toHaveProperty('id');\n      expect(response.body[0]).toHaveProperty('company');\n      expect(response.body[0]).toHaveProperty('position');\n      expect(response.body[0]).toHaveProperty('startDate');\n      expect(response.body[0]).toHaveProperty('responsibilities');\n    });\n\n    it('should have valid date formats', async () => {\n      const response = await request(app)\n        .get('/api/experience')\n        .expect(200);\n      \n      const firstExperience = response.body[0];\n      expect(firstExperience.startDate).toMatch(/^\\d{4}-\\d{2}$/);\n      if (firstExperience.endDate !== 'present') {\n        expect(firstExperience.endDate).toMatch(/^\\d{4}-\\d{2}$/);\n      }\n    });\n  });\n});"
        },
        "tests/education.test.js": {
          "code": "const request = require('supertest');\nconst app = require('../index');\n\ndescribe('Education API Tests', () => {\n  describe('GET /api/education', () => {\n    it('should return all education history', async () => {\n      const response = await request(app)\n        .get('/api/education')\n        .expect(200);\n      \n      expect(Array.isArray(response.body)).toBe(true);\n      expect(response.body.length).toBeGreaterThan(0);\n      expect(response.body[0]).toHaveProperty('id');\n      expect(response.body[0]).toHaveProperty('institution');\n      expect(response.body[0]).toHaveProperty('degree');\n      expect(response.body[0]).toHaveProperty('field');\n      expect(response.body[0]).toHaveProperty('gpa');\n      expect(response.body[0]).toHaveProperty('achievements');\n    });\n\n    it('should have valid education structure', async () => {\n      const response = await request(app)\n        .get('/api/education')\n        .expect(200);\n      \n      const firstEducation = response.body[0];\n      expect(Array.isArray(firstEducation.achievements)).toBe(true);\n      expect(firstEducation.startDate).toMatch(/^\\d{4}-\\d{2}$/);\n      expect(firstEducation.endDate).toMatch(/^\\d{4}-\\d{2}$/);\n    });\n  });\n});"
        }
      },
      "libraries": [
        "express",
        "cors",
        "dotenv",
        "helmet",
        "express-rate-limit",
        "express-validator",
        "nodemailer",
        "morgan",
        "compression",
        "winston",
        "body-parser",
        "nodemon",
        "jest",
        "supertest",
        "cross-env"
      ]
    }
  }
}